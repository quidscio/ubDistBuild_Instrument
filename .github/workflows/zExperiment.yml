
# WARNING: May be untested .
# WARNING: As much as ~100GB temporary storage may be required.
# https://github.community/t/bigger-github-hosted-runners-disk-space/17267
#  2vCPU, 7GiB RAM, 14GiB SSD
#  16vCPU, 56GiB RAM, 112GiB SSD
# Github Actions may have a higher capacity (presumably HDD) or 'C:\' disk, contrasted with the small 'Temp storage' SSD. Apparently does not apply to Linux 'runners'.
# BuildJet may use some larger instances, at much higher price. Apparently BuildJet instances have 61GB .
# Cloud VPS, through cloud-init and other APIs, may be much more cost effective.

# ATTENTION: NOTICE: Consider replacing the current directory with a symlink to a larger filesystem, before checkout of repository.

name: experiment


# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
permissions:
  actions: write
  checks: read
  contents: write
  deployments: read
  issues: none
  packages: read
  pull-requests: read
  repository-projects: read
  security-events: none
  statuses: read


on:
  #push:
  workflow_dispatch:
    inputs:
      devfast:
        type: boolean
        default: true
      skimfast:
        type: boolean
        default: false
      qemuNoKVM:
        type: boolean
        default: false
      runnerName:
        required: false
        default: ubuntu-latest-m
        type: choice
        options:
        - ubuntu-latest
        - ubuntu-latest-m
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
  schedule:
    #- cron: '5 7 * * 6'
    #- cron: '5 1 * * 6'
    #- cron: '5 1 * * 2,4'
    #- cron: '5 1 * * 2'
    #- cron: '5 1 * * 4'
    #- cron: '5 1 * * 5'
    - cron: '5 7 15 * *'

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Adding 'core' and 'live' images could be separate jobs if necessary.
# Conveniently separable code for 'experiment', and may add additional build time.
# Disadvantage of downloading back from rclone, and duplicating such preparation as deleting files from CI.
# Better to just copy relevant markup to separate CI config files, which would be the desired end result anyway.
# https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow
# https://stackoverflow.com/questions/68187987/github-actions-job-timeout
#  'Each job in a workflow can run for up to 6 hours'
  #core:
    #if: ${{ always() }}
    #needs: [build]
  #live:
    #if: ${{ always() }}
    #needs: [build, core]


jobs:

  build-convert-rootfs:
    runs-on: ubuntu-latest
    # WARNING: Must also enable/disable 'Maximize build space' as appropriate .
    #runs-on: ${{ github.event.inputs.runnerName == '' && 'ubuntu-latest' || github.event.inputs.runnerName }}
    steps:
      - name: users
        shell: bash
        run: |
          sudo -u ubuntu -n bash -c 'sudo -n useradd runner --non-unique -u $UID -g $UID' || true
          sudo -u ubuntu -n bash -c 'sudo -n groupadd runner --non-unique -g $UID' || true
          sudo -u runner -n bash -c 'sudo -n echo $USER $UID' || true
          true
      # Apparently may increase buildJet 'runner' to 77GB (instead of 61GB).
      # Apparently may increase Github Actions 'runner' to 59GB (instead of 31GB) .
      - name: Maximize build space
        #if: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 1625
          temp-reserve-mb: 50
          swap-size-mb: 2
          #remove-dotnet: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-dotnet: 'true'
          #remove-android: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-android: 'true'
          #remove-haskell: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-haskell: 'true'
          #remove-codeql: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-codeql: 'true'
          #remove-docker-images: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-docker-images: 'true'
          
      - name: _getCore_ub
        shell: bash
        run: |
          mkdir -p ~/core/infrastructure
          cd ~/core/infrastructure
          git clone --depth 1 --recursive https://github.com/mirage335-colossus/ubiquitous_bash.git
          cd ubiquitous_bash
          ./_setupUbiquitous.bat
          ./ubiquitous_bash.sh _custom_splice_opensslConfig

      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: 'recursive'

      - name: _getMinimal_cloud
        shell: bash
        run: |
          ! ./ubiquitous_bash.sh _getMinimal_cloud && exit 1
          true
          #! sudo -n apt-get -y clean && exit 1
          df -h
          df -h /
        timeout-minutes: 355
      # For VBoxManage for _convert . Otherwise historically not apparently necessary.
      - name: _getMost_ubuntu22-VBoxManage
        shell: bash
        run: |
          #! ./ubiquitous_bash.sh _getMost && exit 1
          #true
          #! sudo -n apt-get -y clean && exit 1
          #! ./ubiquitous_bash.sh _getMost_debian11_aptSources && exit 1
          #sudo -n apt-get update
          #! sudo -n apt-get -d install -y virtualbox-7.0 && exit 1
          ! sudo -n ./ubiquitous_bash.sh _getMost_ubuntu22-VBoxManage && exit 1
          df -h
          df -h /
        timeout-minutes: 355
      - name: _getMost-xvfb
        shell: bash
        run: |
          #! ./ubiquitous_bash.sh _getMost && exit 1
          #true
          #! sudo -n apt-get -y clean && exit 1
          #! ./ubiquitous_bash.sh _getMost_debian11_aptSources && exit 1
          #sudo -n apt-get update
          #! sudo -n apt-get -d install -y virtualbox-7.0 && exit 1
          #! sudo -n ./ubiquitous_bash.sh _getMost_ubuntu22-VBoxManage && exit 1
          sudo -n env DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install --install-recommends -y xvfb
          df -h
          df -h /
        timeout-minutes: 355
      
      - name: _test_hash_legacy
        shell: bash
        run: |
          if [[ -e "/etc/ssl/openssl_legacy.cnf" ]]
          then
              echo -n | env OPENSSL_CONF="/etc/ssl/openssl_legacy.cnf" openssl dgst -whirlpool -binary | xxd -p -c 256
              exit ${PIPESTATUS[0]}
          else
              echo -n | openssl dgst -whirlpool -binary | xxd -p -c 256
              exit ${PIPESTATUS[0]}
          fi



      - name: _get_vmImg_ubDistBuild
        shell: bash
        run: |
          #export FORCE_AXEL=8
          #./ubiquitous_bash.sh _get_vmImg_ubDistBuild "latest"
          # DANGER: Github Actions (strictly internal) ONLY!
          export FORCE_AXEL=8
          export MANDATORY_HASH="true"
          cd ./_local
          ../ubiquitous_bash.sh _wget_githubRelease_join-stdout "soaringDistributions/ubDistBuild" "" "package_image.tar.flx" 2> /dev/null | ../ubiquitous_bash.sh _get_extract_ubDistBuild
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: _hash_img
        shell: bash
        run: |
          export skimfast=${{ inputs.skimfast }}
          echo $skimfast
          ./ubiquitous_bash.sh _hash_img
          rm -f ./_local/vm.img


      - name: _convert-rootfs
        shell: bash
        run: |
          export current_diskConstrained="true"
          ./ubiquitous_bash.sh _convert_rm
          ./ubiquitous_bash.sh _convert-rootfs | sudo -n tee ./_convert-rootfs.log && exit ${PIPESTATUS[0]}

      - name: _hash_rootfs
        shell: bash
        run: |
          export skimfast=${{ inputs.skimfast }}
          echo $skimfast
          ./ubiquitous_bash.sh _hash_rootfs
      
      - name: _ubDistBuild_split-rootfs
        shell: bash
        run: |
          ./ubiquitous_bash.sh _ubDistBuild_split-rootfs | sudo -n tee ./_lib/_ubDistBuild_split-rootfs.log && exit ${PIPESTATUS[0]}
        timeout-minutes: 355
      - name: df
        shell: bash
        run: |
          df -h
          df -h /
        



  build-convert-live:
    runs-on: ubuntu-latest
    # WARNING: Must also enable/disable 'Maximize build space' as appropriate .
    #runs-on: ${{ github.event.inputs.runnerName == '' && 'ubuntu-latest' || github.event.inputs.runnerName }}
    steps:
      - name: users
        shell: bash
        run: |
          sudo -u ubuntu -n bash -c 'sudo -n useradd runner --non-unique -u $UID -g $UID' || true
          sudo -u ubuntu -n bash -c 'sudo -n groupadd runner --non-unique -g $UID' || true
          sudo -u runner -n bash -c 'sudo -n echo $USER $UID' || true
          true
      # Apparently may increase buildJet 'runner' to 77GB (instead of 61GB).
      # Apparently may increase Github Actions 'runner' to 59GB (instead of 31GB) .
      - name: Maximize build space
        #if: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 1625
          temp-reserve-mb: 50
          swap-size-mb: 2
          #remove-dotnet: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-dotnet: 'true'
          #remove-android: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-android: 'true'
          #remove-haskell: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-haskell: 'true'
          #remove-codeql: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-codeql: 'true'
          #remove-docker-images: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-docker-images: 'true'
          
      - name: _getCore_ub
        shell: bash
        run: |
          mkdir -p ~/core/infrastructure
          cd ~/core/infrastructure
          git clone --depth 1 --recursive https://github.com/mirage335-colossus/ubiquitous_bash.git
          cd ubiquitous_bash
          ./_setupUbiquitous.bat
          ./ubiquitous_bash.sh _custom_splice_opensslConfig

      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: 'recursive'

      - name: _getMinimal_cloud
        shell: bash
        run: |
          ! ./ubiquitous_bash.sh _getMinimal_cloud && exit 1
          true
          #! sudo -n apt-get -y clean && exit 1
          df -h
          df -h /
        timeout-minutes: 355
      # For VBoxManage for _convert . Otherwise historically not apparently necessary.
      - name: _getMost_ubuntu22-VBoxManage
        shell: bash
        run: |
          #! ./ubiquitous_bash.sh _getMost && exit 1
          #true
          #! sudo -n apt-get -y clean && exit 1
          #! ./ubiquitous_bash.sh _getMost_debian11_aptSources && exit 1
          #sudo -n apt-get update
          #! sudo -n apt-get -d install -y virtualbox-7.0 && exit 1
          ! sudo -n ./ubiquitous_bash.sh _getMost_ubuntu22-VBoxManage && exit 1
          df -h
          df -h /
        timeout-minutes: 355
      - name: _getMost-xvfb
        shell: bash
        run: |
          #! ./ubiquitous_bash.sh _getMost && exit 1
          #true
          #! sudo -n apt-get -y clean && exit 1
          #! ./ubiquitous_bash.sh _getMost_debian11_aptSources && exit 1
          #sudo -n apt-get update
          #! sudo -n apt-get -d install -y virtualbox-7.0 && exit 1
          #! sudo -n ./ubiquitous_bash.sh _getMost_ubuntu22-VBoxManage && exit 1
          sudo -n env DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install --install-recommends -y xvfb
          df -h
          df -h /
        timeout-minutes: 355
      
      - name: _test_hash_legacy
        shell: bash
        run: |
          if [[ -e "/etc/ssl/openssl_legacy.cnf" ]]
          then
              echo -n | env OPENSSL_CONF="/etc/ssl/openssl_legacy.cnf" openssl dgst -whirlpool -binary | xxd -p -c 256
              exit ${PIPESTATUS[0]}
          else
              echo -n | openssl dgst -whirlpool -binary | xxd -p -c 256
              exit ${PIPESTATUS[0]}
          fi



      - name: _get_vmImg_ubDistBuild
        shell: bash
        run: |
          #export FORCE_AXEL=8
          #./ubiquitous_bash.sh _get_vmImg_ubDistBuild "latest"
          # DANGER: Github Actions (strictly internal) ONLY!
          export FORCE_AXEL=8
          export MANDATORY_HASH="true"
          cd ./_local
          ../ubiquitous_bash.sh _wget_githubRelease_join-stdout "soaringDistributions/ubDistBuild" "" "package_image.tar.flx" 2> /dev/null | ../ubiquitous_bash.sh _get_extract_ubDistBuild
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: _hash_img
        shell: bash
        run: |
          export skimfast=${{ inputs.skimfast }}
          echo $skimfast
          ./ubiquitous_bash.sh _hash_img
          rm -f ./_local/vm.img




      - name: _fetchAccessories extendedInterface
        shell: bash
        run: |
          cd _local
          git clone https://github.com/mirage335-colossus/extendedInterface.git
          cd extendedInterface
          mkdir -p ../extendedInterface-accessories/integrations/ubcp
          curl -L -o ../extendedInterface-accessories/integrations/ubcp/package_ubcp-core.7z  $(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/mirage335-colossus/ubiquitous_bash/releases" | jq -r ".[] | select(.name == \"internal\") | .assets[] | select(.name == \"package_ubcp-core.7z\") | .browser_download_url" | sort -n -r | head -n1)  
          ./ubiquitous_bash.sh _build_extendedInterface-fetch | sudo -n tee ../../_lib/_extendedInterface.log && exit ${PIPESTATUS[0]}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: _fetchAccessories ubDistBuild
        shell: bash
        run: |
          cd _local
          git clone https://github.com/soaringDistributions/ubDistBuild.git
          cd ubDistBuild
          mkdir -p ../ubDistBuild-accessories/integrations/ubcp
          curl -L -o ../ubDistBuild-accessories/integrations/ubcp/package_ubcp-core.7z  $(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/mirage335-colossus/ubiquitous_bash/releases" | jq -r ".[] | select(.name == \"internal\") | .assets[] | select(.name == \"package_ubcp-core.7z\") | .browser_download_url" | sort -n -r | head -n1)  
          ./ubiquitous_bash.sh _build_ubDistBuild-fetch | sudo -n tee ../../_lib/_ubDistBuild.log && exit ${PIPESTATUS[0]}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: _convert-live _create_ubDistBuild_feedAccessories
        shell: bash
        run: |
          export current_diskConstrained="true"
          ./ubiquitous_bash.sh _convert_rm
          ./ubiquitous_bash.sh _create_ubDistBuild_feedAccessories | sudo -n tee ./_create_ubDistBuild_feedAccessories.log && exit ${PIPESTATUS[0]}
          ./ubiquitous_bash.sh _safeRMR ./_local/livefs
          true
      
      # DANGER: GitHub Actions ONLY!
      - name: _create_ubDistBuild_feedAccessories rm
        shell: bash
        run: |
          rm -rf ../extendedInterface-accessories
          [[ -e ../extendedInterface-accessories ]] && exit 1 || true
          rm -rf ../ubDistBuild-accessories
          [[ -e ../ubDistBuild-accessories ]] && exit 1 || true
      
      # DANGER: GitHub Actions ONLY!
      - name: _fetchAccessories rm
        shell: bash
        run: |
          cd _local
          rm -rf extendedInterface
          [[ -e extendedInterface ]] && exit 1 || true
          rm -rf ubDistBuild
          [[ -e ubDistBuild ]] && exit 1 || true
      
      - name: _convert-live _convert-live_ISO
        shell: bash
        run: |
          export current_diskConstrained="true"
          ./ubiquitous_bash.sh _convert_rm
          ./ubiquitous_bash.sh _convert-live_ISO | sudo -n tee ./_convert-live_ISO.log && exit ${PIPESTATUS[0]}
          ./ubiquitous_bash.sh _safeRMR ./_local/livefs
          true

      - name: _convert-live log
        shell: bash
        run: |
          cat ./_create_ubDistBuild_feedAccessories.log ./_convert-live_ISO.log | sudo -n tee ./_convert-live.log && exit ${PIPESTATUS[0]}

      - name: _hash_live
        shell: bash
        run: |
          export skimfast=${{ inputs.skimfast }}
          echo $skimfast
          ./ubiquitous_bash.sh _hash_live
      
      - name: _ubDistBuild_split-live
        shell: bash
        run: |
          ./ubiquitous_bash.sh _ubDistBuild_split-live
      - name: df
        shell: bash
        run: |
          df -h
          df -h /



      #- name: _package_rm
        #shell: bash
        #run: |
          #./ubiquitous_bash.sh _package_rm
      #- name: _assessment
        #shell: bash
        #run: |
          #./_assessment | sudo -n tee ./_local/_assessment.log && exit ${PIPESTATUS[0]}
      # ATTRIBUTION: Largely attributable to ChatGPT through Copilot Chat 2023-08-04 .




















  build-hash:
    # WARNING: Must also enable/disable 'Maximize build space' as appropriate .
    runs-on: ${{ github.event.inputs.runnerName == '' && 'ubuntu-latest' || github.event.inputs.runnerName }}
    steps:
      - name: users
        shell: bash
        run: |
          sudo -u ubuntu -n bash -c 'sudo -n useradd runner --non-unique -u $UID -g $UID' || true
          sudo -u ubuntu -n bash -c 'sudo -n groupadd runner --non-unique -g $UID' || true
          sudo -u runner -n bash -c 'sudo -n echo $USER $UID' || true
          true
      # Apparently may increase buildJet 'runner' to 77GB (instead of 61GB).
      # Apparently may increase Github Actions 'runner' to 59GB (instead of 31GB) .
      - name: Maximize build space
        if: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 1625
          temp-reserve-mb: 50
          swap-size-mb: 2
          #remove-dotnet: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-dotnet: 'true'
          #remove-android: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-android: 'true'
          #remove-haskell: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-haskell: 'true'
          #remove-codeql: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-codeql: 'true'
          #remove-docker-images: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-docker-images: 'true'
          
      - name: _getCore_ub
        shell: bash
        run: |
          mkdir -p ~/core/infrastructure
          cd ~/core/infrastructure
          git clone --depth 1 --recursive https://github.com/mirage335-colossus/ubiquitous_bash.git
          cd ubiquitous_bash
          ./_setupUbiquitous.bat
          ./ubiquitous_bash.sh _custom_splice_opensslConfig
      
      #- name: _getMinimal_cloud
        #shell: bash
        #run: |
          #! ~/core/infrastructure/ubiquitous_bash/ubiquitous_bash.sh _getMinimal_cloud && exit 1
          #true
          ##! sudo -n apt-get -y clean && exit 1
          #df -h
          #df -h /

      - uses: actions/checkout@v3
        with:
          submodules: recursive
      
      
      - name: _test_hash_legacy
        shell: bash
        run: |
          if [[ -e "/etc/ssl/openssl_legacy.cnf" ]]
          then
              echo -n | env OPENSSL_CONF="/etc/ssl/openssl_legacy.cnf" openssl dgst -whirlpool -binary | xxd -p -c 256
              exit ${PIPESTATUS[0]}
          else
              echo -n | openssl dgst -whirlpool -binary | xxd -p -c 256
              exit ${PIPESTATUS[0]}
          fi
      
      
      - name: txt-stat/tboot
        shell: bash
        run: |
          cat /proc/cpuinfo | grep 'model name'
          echo
          
          sudo -n txt-stat || true

          true
      
      - name: sev/AMD
        shell: bash
        run: |
          cat /proc/cpuinfo | grep 'model name'
          echo

          echo 'cat /sys/module/kvm_amd/parameters/sev'
          cat /sys/module/kvm_amd/parameters/sev || true
          
          echo 'dmesg | grep -i sev'
          sudo -n dmesg | grep -i sev || true

          true
      
      - name: sgx/Intel
        shell: bash
        run: |
          cat /proc/cpuinfo | grep 'model name'
          echo
          
          echo 'grep sgx /proc/cpuinfo'
          grep sgx /proc/cpuinfo || true

          echo 'dmesg | grep sgx'
          sudo -n dmesg | grep -i sgx || true
          # Apparently normal: ' sgx: [Firmware Bug]: Unable to map EPC section to online node. Fallback to the NUMA node 0. '

          true








      - name: _get_vmImg_ubDistBuild
        shell: bash
        run: |
          #export FORCE_AXEL=8
          #./ubiquitous_bash.sh _get_vmImg_ubDistBuild "latest"
          # DANGER: Github Actions (strictly internal) ONLY!
          export FORCE_AXEL=8
          export MANDATORY_HASH="true"
          cd ./_local
          ../ubiquitous_bash.sh _wget_githubRelease_join-stdout "soaringDistributions/ubDistBuild" "" "package_image.tar.flx" 2> /dev/null | ../ubiquitous_bash.sh _get_extract_ubDistBuild
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: _hash_img
        shell: bash
        run: |
          export skimfast=${{ inputs.skimfast }}
          echo $skimfast
          ./ubiquitous_bash.sh _hash_img
          rm -f ./_local/vm.img




      - name: _get_vmImg_ubDistBuild-rootfs
        shell: bash
        run: |
          #export FORCE_AXEL=8
          #./ubiquitous_bash.sh _get_vmImg_ubDistBuild "latest"
          # DANGER: Github Actions (strictly internal) ONLY!
          export FORCE_AXEL=8
          export MANDATORY_HASH="true"
          cd ./_local
          ../ubiquitous_bash.sh _wget_githubRelease_join-stdout "soaringDistributions/ubDistBuild" "" "package_rootfs.tar.flx" 2> /dev/null | lz4 -d -c > ./package_rootfs.tar
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: _hash_rootfs
        shell: bash
        run: |
          export skimfast=${{ inputs.skimfast }}
          echo $skimfast
          ./ubiquitous_bash.sh _hash_rootfs
          rm -f ./_local/package_rootfs.tar




      - name: _get_vmImg_ubDistBuild-live
        shell: bash
        run: |
          #export FORCE_AXEL=8
          #./ubiquitous_bash.sh _get_vmImg_ubDistBuild "latest"
          # DANGER: Github Actions (strictly internal) ONLY!
          export FORCE_AXEL=8
          export MANDATORY_HASH="true"
          cd ./_local
          ../ubiquitous_bash.sh _wget_githubRelease_join-stdout "soaringDistributions/ubDistBuild" "" "vm-live.iso" 2> /dev/null
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: _hash_live
        shell: bash
        run: |
          export skimfast=${{ inputs.skimfast }}
          echo $skimfast
          ./ubiquitous_bash.sh _hash_live
          rm -f ./_local/vm-live.iso




      - name: hash ___________________________
        shell: bash
        run: |
          cat ./_local/_hash-ubdist.txt


      - name: artifacts
        uses: actions/upload-artifact@v3
        with:
          name: _hash-ubdist.txt
          path: |
            ./_local/_hash-ubdist.txt



      - name: release! hash
        shell: bash
        run: |
          gh release upload build-${{ github.run_id }}-${{ github.run_attempt }} ./_local/_hash-ubdist.txt


