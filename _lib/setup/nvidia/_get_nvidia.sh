#!/usr/bin/env bash
[[ "$PATH" != *"/usr/local/bin"* ]] && [[ -e "/usr/local/bin" ]] && export PATH=/usr/local/bin:"$PATH"
[[ "$PATH" != *"/usr/bin"* ]] && [[ -e "/usr/bin" ]] && export PATH=/usr/bin:"$PATH"
[[ "$PATH" != *"/bin:"* ]] && [[ -e "/bin" ]] && export PATH=/bin:"$PATH"
#_compressedScript_uk4uPhB663kVcygT0q_compressedScript_uk4uPhB663kVcygT0q_compressedScript_uk4uPhB663kVcygT0q_compressedScript
export ub_setScriptChecksum_disable="true"
current_internal_CompressedScript_bytes='66472'
current_internal_CompressedScript_cksum='2308002581'
current_internal_CompressedScript='
/Td6WFoAAATm1rRGAgAhARwAAAAQz1jM5ZAkwT5dABGIQkeKIzPDdw8z/VWX7afG1TtMjx4b3q8J0lgO66MxG5FYV8Xktip4GtK8Gb9QVbSC2/OrbxQuB9ckftqwyfoABXCJ24I8Q1HB2SusEQX7G216KEcF
kXD2C3Rdpah/q86bUEXZ+979VHk6ZQZfGxyQsuowcQe6y18BwqYx93pG0YdKoc9A9fvP0s61ifaA7SzqQzUtZxkJZojlzjvl5fbOen8Rv2xGajQsl2yR/Hsw+SQRl6GO7/Fauq0+aL3ogEuFudPt+lA4Nxp+
swFQY6XluL4inj7X/Ot099VB6wnxJXRUoMHjfF1tgeUslmdGk+JwfuFmvakVJxtLuZ9exGz+iB1q4At7f2otfTxVnTf18lwluJcdX7avJVVkU4Sey4GFSCb0HUqQVaJ8PqJLsfZIwJCeH2pqccZzoxDCYLWR
I+EqLhRB7NxfYxvyYPW6zX1o1Zyn7VGceaUeJRbp/vg4ktcsptBdWjZSWng8iq0A1gru7MkH17kGV58LnbbKP5sYimKYYSJiqye6rOMiXL4xz5CL023O13jFsoCDRFBqA56ui2zw26MN0SlfjCr7iGBKuhhB
3/hyhX8dUclU8Dho9oyTS7EpUKvDcAYf0G1Nq82ixtf/RX+V9WXCtMcWm66iPh6chsDgEqqG1ljBf0DIxUaU2JxSdNdk8IzxLJOlRC49OSAfB5tuaPUg+sDOCjU4wWSj/yKlQNLufX3dTJX5DKAfoRj6FvoK
5ifF8wBqatqfQNtO7jwUiRI3kp93I7ha7C/4IAtmMal8v9rV/NdrV5/NkFiBU7zzXYb8Ll0QrmYsZqmILABNuW4EPgyjSLgWNaMf8M/R+jFB+xsYzbC50k7zRiDdf2RNRCavUZP2A2fzY29pWhE49NA1RggV
4/Umg+uEmeB1cX4OFvQpNz4CG6n4wIAd1aHgTA+gApeET/j5+VnSqshWRuW5u/Yde3/xz3XiD2J9SySnJEiI9kjGdlqVFAHXNRctERX3TgHSJ6nnPGTwKPExbKSCilA6KjajEfhl/Kb7/PydYkjmlk2IRx35
xkw9ICsJYhEjGWJpTbDFW9xfhnc76YOFvBTUKxXRuhvfI1yGu2Qx4aQbKwWjI5rcUeOi4QF493cPw9YkzJW7tvpsO1q+T5sptlmg5Ku7w6LWEeKPPZwGCKKuw4yIEANruj3dzRx7NKljEaE6foQI3vk1Jk4b
44Zqdd8jev2h+iDGAi2xKM0o22sCMf/8qK7/99C2L84IYEyUww6wI/NI2KRBF1r/QtvdxNDHvIrVllos6F86IQh3wu1ARS4XFam2Orjm+YfOURWK5IXjPhqRAknMlpOxYnKy0r99el0H67ElU4mNon1bP79Z
qLbEtU+u0o4VYCeFP1P6UV6G+/lPte4+u9iXIS61gCkkAz08xvEuLfW/3AzywYSxMmmAR98lN64rvJnJ/GIPpm3+d4MVoprDxor3JBI5GN3ZTm40IxpN+oCS0wxCRthQni1fv8DoU1V4RE01olKNiobe2GW2
q4i0Kc5hzq0zJBMY0/cHuULjDChbZke+AvhFOywatyBYLMnCz2qo0uTYAa6APCCidtyeIP+YF1etL5aVMXZ2t0fYh7sJL2hi4E2h2L5iWdkT43huinoZmGUEJuLHq/pMAX7leCAOmiWdEOYuj8G94K+92FCP
+6qrqzadKhFDEqvALgLiGHNsED+QeO8Bh8vcnHFNDwzhT5KUDRicLdHdCqpjQM3Zmc7rtaUTq6s+m8Djh50JuC7ixMfWDTjGKtYu70cgeW8mf+DHx3Ja711K5BYOdc96HUcT0NCy3EMerz5MmxAOxAtY6Mkh
00ABZGAQuaUIaPyvievn8oWB0uvVGN5S3rctBkVAZeO4GmNRpqrnurOHhsFnyIPlVh8u4W6iAEAHujeNvHoN8vJ1zN45sO8pTyg2qhgSo+5w/Tkn35phkRUgtdZUGAle/GbqiAmvrhwfmvHl43CYZcKHb08L
I4lH9fEOfa3wLSwFCp1++adf5ArUI8xv8VZmRwzVT6luYjz4QLzFlXCGGLNlBN4e7pU6ZAcSPMs+mqxZ9XkWC6H/CCd7/ngthywRSnNAbIoDjR1+njC7uJxtQO+JxW2HVRFRU5Pr73WTXw+DK2Bs2/EbrcqT
LkpJw54RwHrTbye+HyPvhjEY1cm0Q7Fd4M0YiSRpn2ScIvHtbGLOEIuuuDx3S/oF4JCBZbA6Stob3BrwQvlORnnSlWosXFXHkufLQdIfSs4krmcgXjYrPcCUHSX9eQoKupgs/t3mDd9tFcU2OygtX+KJQKLw
VMFM7lt7NH4AzKQ+/1Ufm4CyorHqe2SE8RrXBA9lyAlnLM3ptgeBky3JFfPM4xAq9nJTjcD8srczx9wD79wsisY6l9FSFyRL0AI4MkMiA1YKXXwMpKl2xR+g+lwn83KeE/PL1jPS2E9ZAsm8NbwQJTx0XMmF
EEDVCjS1XAbYzRUFn+L3lkX4fo1sJJZ+lH4ZnP8h/kCcjBLyE6UAXZ7b2wfunYyLXptjSgMwS/SqfiOb3WoJcBaih4P+aal7mp0BdBwM7BIymoNGNFeK8bWbDymGsOozliQI5pWJzRNOmTPqO/cOimh3sPOW
ksU7b6/0hdcWgGtL4YKavcqaYEBnNGzWh0eZKtudg1f3Lam3gJ2dFUpJZjQE0p2q9JwIHfXaFraKWKnVB/r2M6N2onxeBPV7D72duzqagK47gXA3ekkXj/EEV/fMmMikkpibAyno/2vqrUmNMuTCCNHdpe75
cwcSMJMFib50q/NJyD+y527rmahkLDDtF5dN+x/Sn3W3MQfk5JHeF9y2hf/wK1X919k59G/AMlzlnMxKb8LWnLRrfbSLVuZdRL9iTbRgvBEPu+1/VT7JsfosbXnzCQ/f8EvbOQOj3gZDDgmxWpAky8DRwuss
K832bNQkI6H8UCmcwQr4we5ZO/j6+CDADVGTLtFLgdA3WcuZT9YTRhht9i97zRmOyrxRaYe8uCR5CzBJiAD1hcDltruNt3b+jezr/J/9Yugq6zMk+EzVPzgnHwiVmk9AnwUvriq/UkwvuY9Px8bq23F6ocvH
4e2efBR2XvGHi2QZffWd8XDjvHq8zC8m7Hsnfo8vqo0cUj8DPEtoOwLi0hBbb5hXCGhIWROJ+R8s1ZHnL1d+Mh1YLUQZ0dllj0YeUV81JR0OvOEGiCbwK8djgyyWMX9AZb3qXUvGqfNIndRfzNuV0/N9nDu8
tQqDNIqr0hYMIXvftBn5CKdswrqoIPiAGa+/R0c8OID92wI6Qp4jkIL23Z/wx/7g/gCbqTFr9J7NLFc1hX3/nWVK3Q6UCJTevx/v/l5hrL0gyAH7yk6GzmqUmmQL6LaTI90Lf9fF8gl4JLouO5i8XStXbmhh
Ht/H6l3VL3kEVrbf6DidsuoPyXMkhhf00V0rCbNlIFZeFPfNQqjdy2KNNijtxVycKV82wvm+afodbw57hK7e1ojwk11PJ3Eh3F5uBLRdEJvr0wCjayyVmSNhZ9aEyFkiw1yxbRE67hc/Cmmj05kWNkg3s2/e
HSyYrtc4PUXqX+TsbJdGtffcofhfKPJ3H05SaVZNK1sddgN9KGpZfpLB7PHonkivy8RyFR2nlEJ+Q0fEGKE8xx/NqMv/rHRvLL7L8ghPO6R9Dz2iUCu6tz/E8MP4AOKAugBGy+XI3l8BQMCMFdzJ7YQE6oST
KpYYrmoQ8FihtWT7QSxyS6CdnJR0XwZJt3pbseEJZLW8rzkdeNKikhahLZZB8PjevS4M86o8MJhauYYPRU/ZHxwiZbBbL5nZPHIlqp0F8a+UPHrocErAq+C/xadlp329jrWGHnJTLV78UmNkjxJgkW9mMF6w
rrLIYcEXUz2KPSMtEuIkeSAXKsbMDgK05ZN5dszXML0aMCy2hmdE4CX7zQn9yGs6o1+L7NPpE9Eug4dYf3XGhOOaux+3x0GXOpR/F+eVfLtPXOf+WXmQyYjNPfAOJ7OP61JFOX2D9LErwg39ubm/0w23IKxy
N7+3H80Im0p8TWM5s0RR4Vef6hgA0ZVXiQzam9nIJ1SDRVFF/zCF/MQ5N4D4aYrmJK/Rqm01WOzGhpjMEvR+v1g9/n0dLwxgZnIMlJNYp3Z1af6MLUtoMozlO4KcNUWMJxYEDiim9pOjPx0Iqwb+VEmSwaEL
5PmyEUfDTXZuqRJ8+lwGQ0xc+YNPfusKXN0cUHEfq3J5FjMXASqCevuGgWMiNkqc7RY7nWJ2poHQWXHJcp+tOfHU0XqRd3ne2WIjSrqxSF3jT1i4QfLassS0bzkYXFjJqICTre+U+QwRKV/UWsuZsCZP0xib
DmcHl2BEJWR3xvx0Y+OgAxBo//MYmpH0q+/K4HWTXDumDWjLq1ymMKSviGr5IH+53OAqscHSJx3O1qLW2kZuuNeflEaUoY6mZUTJLNGomt5WEKvxWJn93Suh54JyXIQl3bYmLyTE6ZK7Z7q3HNpwUQeH9NMq
b5sxL3PGCkd3ZTTrXt8C2H+FNDqS+rM5qJtP6Iy/CyIlYGEgDPJo2gxoiiUEVRKv6CaB3k5EWSh9BhWrhGwQFu8paXLwFU7TeCE2CoBEkcacwQJt0FU1wa7e4nXrvnRipQv/jo8HOO1vO1rywHGaZ1bdl0A4
vVy4tNGZ42+DIpeaAXNUX0CQ3u9+8eG+4YVfmxAfM09tgvSV3r2Ny2nuz4+3UpW4zUaoClUbdh5bCyHGEuhgfHhk/NGD3ON1oZRATHKPT9FTft/wG4JIBnsSpsKNp58Fk9tKKC1RuidIKov4sKpYun32OCLY
BbigmYOOos6pEJEFmMUYhmJHWMArLTSk0J0ZJLQLT91CC4SoXZuIYVHU1/oKPUV36c2ktbz3rlGtQyW4wQIRWKN/GEMFM3/5GS/VqxLe7t2WTe/Mk4XoOJtEMT2KmeFwyPAIDOvGSQtgzzmcyxr/k40+7F6p
GEHxz7QNX+mJe5Q6FAWcEO8mN18UeRgPsCo/Tr6271gQ6LwfqjDVzVBNnrlZoQA+an0vjnrKyKF/SvnC7LOABr9o26skySDlgg21IYk9BED9lZxEY+VXI5KFBXddvV9nxmKvNtztSxjRLYJAuPvWtHYEN4cN
C8ACzr4hFt0LLBPtxAo73FqAOY8bBhL32m5MpXEP7WKsZtXebPOt/iZcyyvF1OVsU7P+P/1mG3uUZ6yjMWqd6sISJ0uZ57gFLglH+IG2NcVyTgBWI6o2R02JWGh9itdwLiIZbya44dZKgwve2GvA69w2PqAW
5DHYm0q7vav24chWisYuimQsRyGgDYcsqJwsS2gcmvm2d/gr24GEZZWJlXUdEF/Ck2+QoOcv4v4URZjvsUN8LEXXhM46/LewqHjjq2c3418L1eM3NtOAu1jso6AJLt4j4NWMIHiABIZZmUYYGueuxDWocWh3
n2H3ett9/wzTjoZVXhEo1c94EPg3VGb5crslrnY2zpdZlif9/e8R5VFyVBPSyOwhk8lSQZilXDNRj9yWSdixTAWhAr98SZbyAxE9SqytotLF5Uq1AxuYggYFrCaGEtD0z1IN+xCeq64evcGKgX7pPT/21HY1
ihCmzgKC5c717c8lvXAXHgW+Vy7AMnnoGR2Z0zhCBlxCUQCRYuBHNfi04tlfnjo4Q01itE5+dCfX8X8dkaUzwtOTuk7Zc/4CkPQZXxSBXKwYB9H5mjbkH+vdqbrTdgPiLcQsciABBxLpNKr407pUHsyrjris
Cka4Cc/tra3eDcsf8RPLY3k8MQH523tamq/qjqJnLwQlXUF2EPDqkp5KyZV3Sa2LX6rCz9g98TGFaNCZfl0iSHkqY5qs/4Jvg+SQwqfKBBeHanEDPqAQbsIw5HBpSSkexYafbbTtRbXbFfuXIOQfcOZpH1Wv
IIMHnkWu7Lpvz5P9hXpnATQ9y337kJP8kKAtj8xDkFdPTmp8H5EVE3KgyuS/cWuPA0CA9lgGXIhmJTR0JDmmCemsaiZpdrDkeO1vmersrGU1FEIAybs6YnJm4miyy9Kq5LEMi7PGSTW9Ct4O7GOL4CDbMiXK
eCsLHo2sISYBy2m0BvX6dxdIEF2cc+EYb8BbaszfZUdzHlAz0QHWEFidIiV3ODjba7nx26G4ut+ZDXxhKSJB1JI11ZKm93ag8Xp7zfaAyPj/7uA82C4c5Axola/0aj/BGrfBP4po3bVoJZyW9RBmz7G7g3BT
bblwWFpLrmaUFr22/+wZ9FA4DW0Egwu9VKPkfPcKA0e0JpJwTbswD86uzetj+G9jlPktj/RzdXtC1FbSuhts9IYSf9mU8uq4ThTOE0xeCOjlhCJll3fEHcOorjrK0BkdVOhv+ab/VHyR0pjO4WMJNW9Cyf4c
8UzyzTIR2PlhGSg2mVAeLqU1qTTWFgcD5pcsqgqfIOeQP3Teig/tyFMrwCd+25j49lNg2iUNtZSmvPMl2ISfZb3KHYaIAH0IrBrZ+y8CCRvdBkZj3lYQAiUSwHy2oB5jk34fR13kxDaR19vBFy2+nqKkHngU
60XwZh5Rr/fyiwzI1Lng1GMKNM5wkTDZ19cFRSkoBu3bZi4iRCUCiaX4682bDFrcD1j2b0KZz67jUKHx8oJDhFR7NkJHpUnPqVI+p2fEISmd6KCPZcup6A/ifGAmJ2yN8kDmwbzRlxWnzg5V0E6yeCtp2pMt
IrSh+JCwQsD7cLrho9WSjZD+TyUrabdsRMXdEHN3TX/RjJhh3JXvRvruXijBN5sNfWb8CfKBa7syq6RV1FB7O115wnLRJ3P9djpgdIWm4BCth9o0HrzJ9nto1lEB5wuVWXO+1zwXLB+LvNqEYYjXb6Ml7rvW
GK8cYuiQq8BXs95B/HA94fpHycjLGTPwWjnVXp0fZnBsFZwme2UHK9qQAzMqZnTAr1Q8OeRNiKbfSn9AzzNRCehyW/v0ntUSMdxkSqSMur3akUGQ2+ta/XQzgXqg8ysrKvublyFp6uqFdZs4ian3UJ76OnwT
boDNCBL8yRgcXReb9df5N9S0NjHEwo5Z7m5S6lvtlmMifGyKaP8hoTJ/j0x4135wWgSq0+C5dBPQHUsCkTxyXBpow6QpYhjUyxeW/+N+yqYvTJVMw6ZssRLggO4jpsE2Cw/5eNsh3l7VeOrVl9/EOZDujf3k
pBYu+6Ie//gQvHp5fHOySTvu11h44ynU2whbAzK5cyFNoTMOb2+Spnl+t5hB+LoTMhOXq84rAMF18f+NWpBRYAmqhFHoGMko8CZZxi0flLu+vHNibB+J4LY09RM/IhOrhlOIEzuW43km1NpP696JV2IIt75l
UKL0X1+Ld0z/H6UnQNEEJO1qQzmUXGDHNl2rfJdBggmcWQXf/CW33asobjkUvyNJl1KmrJMAKqLx2Smvmj810Sc1nXawKwMrNWkVRxZBewm4tQSVaCDFFqxUUyZ4Lehmtkn+7CFIrb5WZ6AMgBUOG7fLmSYK
15zFtHXkfaoJQjZf0QV9DRFh1aYxdBJpWxz/C4s4C4vw0LlnLoj9sAhWSGia2GK4ppJUwtRDiFtLbQMw0FZidBh+Ld+rs8tVJ1d0Wik2H+V8l/UvSqt8ZSc7WylBn2iQyopfaCAeScArM4flBJw4gScEyskL
4lwpjyF4t0aozjXeGpKZ7WYdCOR5mXIQSWMfqIOKU5AYxXlhLJCF6VbKLNSszcKzBaG39pETAtbXu+Id+iQIatM52Sme9Ndu3t3dqHEudbvhsKfIFBmeed7UDpPVZOzYT70+JfFpaXjuh10cx5henmEZyLKJ
HstR3Ogao/dbpOS/XZIbIY6cpAVQs7zva3idP+jRXWvMRI8cyZGAA9dp0RgtFmtVBxDlHLiNte3ICfbYIG2QszK3V2bUjH1DX5cNKCqWUFbA1Rq9W5hei2rGehKdPnN/bcn3kR0+AQQK+q9PWsBKr3DKCw+p
Y4npSzo+4obpP0i50ZeudJcbpDIgRSlkpOJpTUPvFI9aKSP94KkW1JdMJersR3XKs/zxozwpNRjp+Bcul5qJa5II4h+MNhh4mUmyPaOUe+cDjawEOduT6XoMMhrvPbq8a4+FoxxMPrDy6+uRL5bgIYZYENl4
mSOjvw/gSh6YfHuY24eeqAHGNpeV+VKKyuaYkb5RjDaj9qD9/gNecq1fX1RwPwmuRibx8Wo6b4lM6PLaD3fO5LFpzO0XJKDdQEsQnDcfd3pcAAJABpj56AF19GjYYFDMYx/7sFMHv0/ILnaQhsbQdXwZed2S
PRlUMUPBjtq/u/SovzrgQX/n4R9/Z2jsi2FdF5PVJ8T+E+o9zzrshUoTAE08JAc9orib2VMijy9konCQfG/kfAD6jiwHJUVf4UvZEbCazfeaC+YTHm6mZOKMvBCaG7KxaNixrLsOsduKetMM4gEIunVG+q2t
wEYITQ0mdzEAaXLKieCSnI6kbsIIkvLjKXNPS2nNKBxuR8qOiD0MekqWG8P9VmhVWYcXQw9LxP4lulWOGfIOIgYRa3bh70lu/ZoHY+5SE4itZraGCl5IIvS2t7U1e3mFAjnullKToBw20rAQ1zAKzm9qQKte
3EahEd/6ZQ6wvcjtYYP7aJjT+XxSfVkZ+8N361BAww7lZu4d8TOb1ndzfVuydgHGVqK3ndCleggkGOK1+PvKQtuiOGM9hpXI/yDLmy0VSV6hFZhGn5DPLyq3LaQkPlVB3Nmt+OTcxn34dS6mGd+CKPUwLD5A
KII1Nf7yhz/D4B+lEKJZ12DEIVJyF2cnw1goJF52Nwdjy+WlToHbs7PaxfKBt+J7YaIPeFc2P695gphtzweHo7mfqGNMxke4ddy/hY9q2D4NECRcHLagtIaTgDFnwW4VP35uc0y6bpaq1WQEmP8MXP5Exq/t
ZjIxMc8K8Kvm6RZSSBvIjhInpdeMZFno+GMy6gCzw+LR6QVaKUj7/phpc9cox0mQ9GrXPBIoaahRz82NJ1wsEUIBCrtvbe5apRCawvJPF6ibKpAdPrc7QH9jvKM9C+DSQrSwtJm5t7gu8imM/RcBN9b/33hn
MafNP6Lf+/mipFzlHPM5AbTmOxdD8Pon6ebsp//ydv9uwukauLiEdbGuNzdNrhypNr2KxhpehwWxRcLPLG/HGgKcTHQQ/4xTIruR3TgzXdKDj2w4VedomLfqPCkuxcVAbV/Eas6rxH40rIbz9Vd5iglneMxc
I0rJSsx3jy2IO7YJ+wp4E4hPCPTJP/tLXfzSj1boougdfp16nduMl0mdAVbwmGyb9nwWhtXLBktZ4XGDYC1VkSQ/o4GTgpMiPg0Hvf8FDiqtBriWjQ/CCBrePVQCn3C5jtBcz5h1ScIhZsXvofJ/p/vTKb7h
XYOiRTK2ALl6lINT1NeBs+KGBwHHRtRicw1zTcLwg77VR0uqvdmsU4Kg4N6hMkp5CrpuEapM+nxJdJPrVNTm96+kqGDqQKUiC+79JrWvx91YKbDa3/SVmO/cnmP4bIZmpXnJCjEBy4gfE6MZyyyC/wQE7qHv
BX2+NdmFYukccPBal4lXYzB6e97v0gWvvBrFpdJJe62oH8low8t8RNsss5+mL8IotXMFGi7rj2SihC7KYoyTE7L0OsIS5GNC/qdsGMz6Cg9mmGwkLqiax+7gsc4b+WGcB9l9obE0jUlJFibubWUjNyRv91ms
dNcW/qIEYOlJBNtVvD3M9rC2sCqptRGEPsbG8Q6+zexPdofvCq0MDrXPPrvnQsrAB3T5wshqR6E8PIZlyuekmF4NZFDrbNaHRbuuhPljPBXXljt0VHyXxa/imfyuAgDrb65IJeH6XwSEEbIYPJp9ZXMJ3jmx
bM9rBMWTdIqRxp5UDgiVbqc8s446ne+/MvH8EfaM2PqFm6evIX1hgk5UK8+FjthRC3FNki16elfKAqApQkX9Cm0AO6qviE2A2OXQbbGbbdB/PYrWBA+MdP/7Vi7JkZ+WJbScIirhJ/qAWeYqGzUeD08tIWDL
G6JE9hGagzhUYxMgfRe0GZr+DyMbYsIFGJ/ygoaCw1Y+WAVuFQxb24lq2Pe5LQP291M8yzP7PtZ/mJ2kXgUgrIwkftAw7ffSREbAW0wqfwhicFGk3+ZhM1jEiLrFVbIMwEctAv3R3OnZ99BncWO6cvImSn5i
3C4DS6TGlk/XHdUkJ897G4Lqh/nyuOkzWKZMujCGi9N8eVbjnRvsIjnStVTPdNRH+g0hFkAVTgR61raXo7v2j4MktOaCISxlnxfb3LVEskTNoXd3hmHXYM7qiiuW9KXx16lbRqpDAODuzRn5cosMMYm7iTYO
UAvvN4iJTQ1dCrjpvcGBV9rK1i20bsaBht2lAM8bXqFNHciRoqf7qQSgKYxhvWN5p/CKxrguzl38xxwxUWGean2+L57Y8mEoq90Bj2UTl4TxmkWvJiEFC0kmhv1st1qEg1ohP/C46qAlmd+EDw1JWtFoLslr
wKAYbhs0ch78dgmCT6MtmnNE0MWc2AaRP5ldGGeZ7F+uWG+jfo93PdpWyTXQcUN/fZO0SkBJ7Ntr08X7fWlxiw3ofNrx7GgTK/x3pZQMGlnr1ljFgXyfkJAYRzD79gdZOQpytyHrnCN0BUaIMBKXVOcEJHxU
rNv0BixwapMf7kmqFafN8efKLvv6/L/u1uB1XMG0ysfLJw5q3/ViZTQPN/AmovVdvI7luLNJV90gUJc+jZlIyjjEd6f4iwrO+/4viDb6384+JTlfRnvY7u2S3vx1BRtPzMdQdcTAVNZFj6j7b0IE1ru6X8mq
DSJP3bf+bvB+/9RIEpaCNurPkFfhcA4RsR3q+n4WrpEIuA6CEVFOwNHQXpRQw0kcWtAAyj7dpKjdZMksIygPaG1+Ly230CRsURVyezLc4Mf5dQkCRzFoHv95829tj5N8bt3TgPySDcMutAk7lbw2bDbShVqz
sz6JC8aD2m2CGNi/1s4MJ4hF3ZstELdynw9tMDji5toOu3EQZcogBgAmfarZwY83FFQbS0+jXqHvQ1aO4RqdPgyqL27OLK0WKr3fUhK6YI8HJiGTRyL+tFuuiF5J9STsT3ysBKsVSmGnJ2NqEATGLTEIpG7m
cDznjteygvGvYj81PV1COfafEhJt8u7RxikUrj5MMnBt8WjsAYj+RFlx9DEg1eNQGbxHun6RWYwPJprFsVyT6ja3nBqqZ805Pqd+FV0KaQB7jkNvPCM+JkSd1VP2kWSogXFQCPDdTWhKFob3DXzM2WgHB6hj
uecigwoq7g2gYlOAODmpcwbX5HgpP8iSDkBC6vjRnOR98WZR0R2QycrBJRZnHcOr0tf7kmGiwrwRp7eZRZrmCmY3tWl5wZaZUFiQtlJxQ58wJkCOSIuJfjdPSkHT7D1CPcH3FTmwEarSAH6yX3F3Cbp4VpzA
fdKQe6SzbtydINncRWtpVsoOTNMbit9uj+XyKTOt9e1qPTjvpwYNWoumB07NIp5yGh3KpIdtxcoQlSJDVVifhVZjGn+wCB8b3i//X+6NSvtShHB1yWl+L5USgsfJpqE9CQixQ8rlx2Gm6WYDhdO633CnW46q
3kO7TaZGcse9pb4Q68+N2evzrZzBwIRT2xN4HP+XhROII3f365v0mnX5a46i2XlVGI8CvuLCfOWEYYeRpHcX+/GTXeDVCJifngKiAfvVkFUQFZlIc7Fw4GZciNkI2z0lJwYiIOhdCyg9Ned5rPY+aQSsDbVn
uaRX6NCHBROnuTODVgyYZGGdp+i808q5szIpOQnCdTjP6HKMjYMbU9y7R5HCu7DDMMNDJdS7iNsVONPjIVDOSJgOYTD6CER3nZqckZkOb03xhYclDSzUIINzC3AHmQN+KTj8SVjst9xttPTrVPwcyDCQM+do
b5QWiKCrfVx326e8UXwS6HW/07z3Av3AYc0b5wxZXOzYxKrNTd+V0Jn4qWItW6RJvUNt3xq0p8ZQDwdrBkU4HE84H32To1QagV2jfdF5o7s4vqm24MjjP84DouJkiwo+4VSQ5K0G42QBgE0gsmeXTiHiA8j+
ORl/9MIP1TAl9QYYM4K93MTT/khQ+8mv/G0jnG7Us6pHPspsVTAUdFMy3weEUAvgfq4QCIkpr3g/gAsbA3e/QIRyeQM21QHqawXeMfQhK0rD+cyjD38PX/MBfp3xpja44w5ntmfyXP+zHkGMg2uINVqcJ24v
9DXty8ITW+35iVezbVg5iTEZpcVaBkMPqtR+R8NCjAKifF8ME2QG8olbDZPfC3Y3YhSajkQKMKSK7gZXxPXvXnM5EhQGT4t0aSa2FEKF+BRWi1xvRspsI2U0RJZhpakEDLTtnmsDcIKA2uCKoI01mjzrAVeo
j83nE5lbdQCqUmXv8R0OmzAjA1jEmHGBZMZPSZrWGL28iJ46wpZ40gV71KsfNti3bs85pFOnf64wO94H11jGZYd6DY44s0icK4rghDHw+Jnn7cWY/Tgu+P6OFBxTuFqToPeSon5GgTm//nkq7y7gUkDSTXg5
uqQNMQqjVEV1HqCbQ1MzUsNpLtG1JAnBJPxU2S8ilCNrF7dMDiy4FANIeVLlJKqhkS//5PJqJThMoRGQQC1ZgPX0YI67RZR3b8R5ziYRWuqAqUVAfBYEmDZ1KSCXhavQItejLQ1/XL2NZ4YMxLcfbnVUMo2s
rjcppzzyv7IhDvMJ2/ePB6XBkO1xO+Fo9EOu/a90rOlorBtHwy65MoXrOe0RIa85aHyMVEX81a7Bf7+v9n1/NR9f+1R4TCzU/GsIG9j8xiDBnZ5iC3Y5Hx4KhEI6i1hR90iXzDPvth/e6JtlhLrnkgpYtCeP
V//C5VW4RpmEgksHvG8/kYZz8veKsmeQFk1Zu4IETQ5V6XmOnpYHY5A6XzeNCDtetlcWsLnV4elgRoGljn24UJJ2Uc8Og4Z/zTiLVnZ4yzec9xCjftYwVdsdKZl4d3ZHgqKwbDibnG7lTKym4+oHgHk2eUCK
KD02rb59uCQXU+A7hC8tRd+7eNJKaL50FTA0y4UiCFN5iutXCNRubkP06EJnM86WSR4pg1HXAwH7P0TgrLKVvYrjqmu3tuy6SBlpXfOAp7fXd1AfYp9OlqyApHLu6QTas2g96x1AXDfzEzfMwHZi6l2SpBC1
QbiClgzTLY1EZO8us/WxUuA3qcWa4LKMHVsKpD8QErQ8HR3Jpo03PRHTfIRS48wHSIYF5fgIDQn6DFJI6bnSfBtrLLmU+OakbT1+vKnP0E4Zz0iMPPJTkA48F21lTJY9iF1RVVCyK8qt/2z7X17PxWVDCgVd
YaNnPWLoKuQ7buO8P+ISEvWVxM8/x45Ad/hKHYX78BgIJgHCWKFEWOaPyv4ofR9QmHOK1KmDR8La95lnfWsdEaPttrK7n9WGHz2dVeB2ThG2B7md/qVZArujzE1w88wjxFKWQZGpYHL93oZBxoVJfa2HS/Vu
QviAN4r0PTDHLxhUFMM54KZVu+B3hcNvD+VuCWj4f6n6Rns0ZJp51h39wQHqDhcNoktsOylLC3D1sk1Qhs22MBD2KM37BDyjPcjOfeJTDW43mg9iY3zrRhOYCDIRYsB/HOsWKD1QvAz4M4HEObo9x+eWTb6h
BClBp+fqf+aUbyUYJNDbf2PuT8pJa1jAW0r5p1Y+DCfPIeg1pzOm9XodpuSk6+QpVnbHO9Lak07Oge3o5M9ClTwkOf+ElqnlsLWSVnQgeo7u/uzcGwo96B9clb12BHg6Dh7qXAj3TNMv6X0a1VqhTKWRU3di
Gvi+p8PsdeTsSIRMK3BSSvJp7/DalBqPzwz7nXXVuGTSkOr/95ciq8wtsnSEKL4ymeYVnLO/BvwOygshSSkqjc2PNy7pIIPswW8582Mmmp/stfS3Z+U+VyhgnD8NpCkw90Qv2K8PW+/t6D9XeBZbgYhfGGsd
41RLXWqVk2X81+kxCaPHCquSeu8+YuR3pVQ/ka2Ki2jGjfm890V7KamxSm7ip1VeC+y2M3h2jBJvVw33aJdZ4uba8gD1cEmcuJ7LupvMWYxPX/7XJAX9SPTq99b+OGL5OivUkmWBAIee9hiueBPrMvtbCm4f
yzYGvClcgOmd/pFvcelJh71xkOO3rSEtrurwKaRKW3i6HoKxTz+nYVhOqbYJcH3VAhcMRu5AM2/KAwDwoOFzfjbEov5uPZqrALRdELdiHv5ISZSlT/eqM3O5QIEYkepu2pIWHnUpJq+6Eaj1AjjU+qs+H8rq
3x8RgVg3P4UT7gSpAoT5iftIBbhwB+cY0M7Ep0M0OVa5k/R8U4EwTRgPkH25WbQyqb9BMbQnt1toZylYai++Xs2QfWaCyK6Jvvz7QK1xw/4BlzYRRsuP990R0JMnZnJGLIj5cRgyjgx4QZqy7LmZ9WCf4Hsd
v80x/NAtbs86y4EQgqi83BRNvol+za1HV1Z0MXRE9+ES2E0GfsHSPgwIushorKSvIk96hWDASyqbipfpPayVCZ6KvO5An8/kCYLDBZ3h2UPiWdmUS7kH5+PKSUV7oyprZdcFyd+qsxUYayG7NmfGwStteR9c
RqgEFfOQf43i3sBMJ0pPZSRtrWZQfV+8nNiZ1xWU1cfC8nYkR35RPPo0YrGUwXkZj7/IOuBOKG0qNUlUMo3kOSqzZ8hBVihXIgbuaErV7m8GfameKLMaBmchAQCQhjN1u+897l7wbmfJQXLICWnwfYkgIDsF
pXY8Z6pm9gUy8Lnfiih3nANGZL0iGltz0cOlkywFB9BmD85aP0ifnrTy4mtIAqc/tm26WHyx4CbjgEGFgCrunOWoa8WsbZ+Vez+VXwK09jmsF5kpoI4eCUAs4UFERLnUvUUza+2gZjmSQsOdRADh5v2VxJ2I
ub6NbzLlj4MkHLxgYBs82Nkd/qCkVSstoeqAZQOmldkYQXQET0qf/Y+rCzCrifgXMrdfHS3F8Nz6RA8x6N9HCzwJ3eCFxXGHD/vo+qPUEKusIm2Gi1tf1aY1wz5gk+IHf/rCUXuNsh+93DxPlPJ0YXbgY81R
BQe0ufQk0n9PDs6u+TtRBP5Sc4hS9YZUyvWjbEVUnyc1wahsK6UzgVbYjz5DTLnNUZJQpfERvRVExTtv0W3pGXo4KarzWnQFatNcpWSNbfCGdN5myJdzEuLxL2tJFLAtrHSvpAWPUbub09uK5qLQG6e/ik8S
HOb9NEj2/7alNUW0YLYnWIlrWYe3/fAnlYHmZwWHxa77yp7Oh7jR73K+lIdT1W3budbskrrNvkVppPPvhHel04CK2TjNLk8fjw1B+uOxeQa+PMrm9Fsp8aaP+oscATAIQkbJ9W9YwfTSRG5sMbVc1ww3dnBB
FC/MEKaTgBUW7zrK8YTckZ02FsxzLORrsX2mhhPvl7jxUjZ50gbSG6nIp+27gWsbi1JTqBhfuO1dQmajhCJEbkO28ne8u/HDWYvS6Cx2TdiqXSEOd+fXK/rVjzgTzjPhLp/uxIXzSlforJFdzfWQhwvF7rU7
85oi2vZVdkc3VboXF7+o508ychOBUwcLGKEME7QNxtjEx+mC2g1J3sorh8Tm6rWwa2PcpoPlfXSmdPHQRAIOPqIm9aV0xq52SmpB6Wg5R+pCONIRk5JQWsh3GCQ0QZVrVoM/Ap4EH/OUcqPOtNJgZLpIT20j
LNrMV1P4DPSTzyBQtzXI+cfJ6vBKVNfXmhoYfdbU5itMdAIQxHbMC+fWLT11zIWSZnAUc4XMUwij5KUpiaVlwyushBsR8Aq+C+RFOKhwviGekt6dvxYLBgM93nCi7tnuo4Dk8+XR6cd54FBad8NCp0r7rwzf
Vh9sXZhPM6e70n6YxS36hJYoXrfc+T3Uc7PkafpNNf2GBRPc1PilTNoOmigoop2cKoRvxG0XT1pvNufiROPIafU5zF8sSwppDTB4vOxISjAhZUN/uojib//bRxROtnS7r5ygmXoUZgwDQN27n8zcApW94A6X
TxkUC1dsN2/JvOvWa6TewoXlLjCsX9vjfWt5cbh5tgaGJ/9yJhXxL5JlmwmNFhSASpq0udq4ZjHmKySla/TPMDqtVNpfTL36jPCGQf2yO3+wxMLkZkHByoAD1wKwPfpvvFN1K3QsSZoSlbQRSDAltbHHzjF7
yB5sdeCzyYbp7oq9uCDjZswQ3qZuoPdwS85tWT25nmpsOmhwhSnSXNuDCb3cZAG70zsVWTffS3MUnfOCK5s1Ek/wRhF9+cxahQvGfX22nW2qAmT97Nf1QlQo9YLjPJA79P9M8G6LDo7VYC26MiiBpzxrS53i
leeFcHKMOH/iqH5gwyMmYyPkXXtnJsaG1EhGWpt5VZlBIkGVAQAAyySD5iNrVJZ5rJW+2Z7DMBJbL5dxLLH/uso3f9ByARKehvTdeh89hEm4zMDtMAW/13+VkD+PgjzGgCyo4uxbi9MoU1yxKqteVhFogrFR
CivftvdIoQdcQblWj+UqfsyLCNqUmUFBOvvDBstlxON65XHF3KMANJYa7XFshrIEAgVwGBejy+2ho4OEiiW6sVMPvo73UwMvqj+UgHcxSl+jHHghtlbva5+SybHCrHEgMDHMXt5qLO7zKzrI0tCyRjk6MfWp
cpb189isSZUKPzZH6XkgiFcI0V6IM/tmsKuJFh0T8whdGNgU+8x6w1wL6TebmJAgR8S/JBT07LKw5Z76FS97MAQ0HIbxacAIHQnr8TyeWV7s+XToJPEsMf75FxlH9SKodQO/YMMignWhk813VApFJxT8ohJE
izeZLE2wftHIsy1Ov8LHtl7MrCsR7aOsFgk277E6fme57NdWbbr1BAU+VgaN9zXNyCEJ47STzocRhsCrCRVdxmgRSB6enB2DrJOytXuSyTbzI+HrRQOuNYLWM94yQKNwTaPUt+rllXVqKDin8v83SYcbpFKL
r12qbM9NNGMLPRaxycIazjG485M/zkWtF2UbomNS06VwTizmUZYIm9KXExekgoKtbQ+sGslVePapKvRAb4dNkIQKoGL8iCJLkiape4boUpiNK5cmi/xGYSa/GEVVWqD4zMR4Aw0C5L5+0sfuWbC+UhoxfXLR
HnOFh2ykM04eQsroBapEebHDAwKdj/43SWpiFxKUhcWuti+N8/+9bRQbK3R0I9AzndJL+VSPcxMIkClLbFMQkOJhjm5FaFtMILkBoKWzTcQ2NVxM9JtfgslOQ7QsSiEruthIhaFQDGfubYRtfUcAocijZvr0
6rpGHOV8CKvfWaH0a9HyQkfsL0+krUM6OlNmXUiQUlhwh43kY+AqaONgfGsOoOwroJa0GDuUPA23KZZG74MBu6W+XDgZK2WDO+MJVYQvrI2CHdR6sgg8oxOOy7/BnA+a0IBTBg5foDr9aqLUnyrTD9CbEhxG
rxkuDVIs8Lz9W6KNOCyOtO3CCF+2zjKkYMgLRlyO0B1DdqcwtIuvTso1gHLPHvu+/9Eap3IgSLxpfgoRtigUBV5p87FNtBNIFnLdmCcW0GtK10+fRJLCPd35Yy3xeWytBd3YWr/5jitQWphIyNVqfZJkNHbs
dJ4WlavMiKYiaqcyEUmJ/hdZPVpmQFFqwwhBxhUZrpdKaBPHnTcq645cjFe92HrmE3JSQqkCKQIdQRaku5CxakD76d2J6YuueoBxm1z9BP/T4TUaJs6jRX3rwG8d8ElnzK1vKtBiZzpzERmMUvp2Spe7Jph9
RRuTXINV+VnuEYKGKLyysVKEN+IAXFCvGExMmpyeKVNRA20H7gi9Rray0/tXmxDZWiuSe456/0wBn9qV93Y9m8Cg+NL1V8CH55E7K/yw990rw9TutFNAc1nqjQqUNEpLBaGAM8C5u42I80ifimtdruBmaaec
CMCcX/OwccP2fcxKDYfTmW946l7f4QekdzON/e8BxogSWswup6ypxdBZejoQQOKL+k6ddYlO9fXMVIGAy3qYcOEAgEZCt0+V2KIP+/CufrKoq9/KySHprwOnCbkJ2203M9zc4+7fN2w1iCQxX4/ry7QssRW9
H6q+40uNxdF+KCLHzntYprksvg+W05hV6E0jzCYnGqQu2uwLXw/oo0cZcUgGtcZId5ZOjnmC6/tHKN3G/35ePG1685DYU+QLpnk1FdVtEP69AM58UKguc/z+Z+/kpc0UjraY4jS+6cMQwT6KxyF2a7ZMI0sR
hoteZHrKlH03Rmy2KaOvCxiY+57iizWOZnvPgwt8FAynNuDi+rbKheC+eQATR3XP5fFUjjclviLQV7i/40qv53KaTYirmM2xJGbvwj83Ke4jZKO9PwAQ7fum3sVY5Qa/MYUsA30JNLl6fLOrxrdQZ+PwJBAc
NTNIUH5kRJtJ9Dzi/3Kf1T32Ha/U2atnDnyVbjK7+02+HPlAIH+Ucsxyva9WQOMxOgj1IX+sbH+O0P//x18aHhr8NQlqwKB+36UdjSPFq+7hrEhPwcosnyNs5nSaCDXaqhQygpBAXLr8iAVrqeItRvHhSDdJ
9WdTBfKwSA09myKooIXsKxtTQJQWxMzJvKk4Y9YYh8nu7JYyPB6GkpOERtGZp5ETZ6BR6Uhm86ekilpnu96MeJ2fCVmyVS8f0FQ2ekL6z1gMuc9siW12CiK8se8y6SOeDgAvxilXgyhwt81w+0a8wQOOZZax
HKXdPS9E7DJdF4HlPNeDD3xZl3BJAg4OLmBKz4btRw7w587T57MwYAi5DYQb/vpWfyaIOv2g8EDIWb+zEfjLuZkgRKX02bfpkjlJT0+KIHo5PEHzraNqdfjop2+0YhpaO4cArXPnEsC2tULpcqjFLdW7/ZHY
rnPwyOAV59vwrYwMIPm9z/fLQxHlJDDXCYg59t9GaivKNhWvtIre7vKPxIbpwBdczqS85D+kb57NWrkiD+rAfBS6b4dG5aiv9Yzrfr17PgRyEN6oxgurBGs/KNqE0cQBwKKsFGZ95c8T+jdNyd5wfl12VcKz
QEfcDF05WdxqPFLGTEtlS/7BzQVylBrUQJrIqVNe1hcdU9vOu1tg2PlDkTIL7KHEzbprg1FskmU3bpngYdecY5JPl2zurpbCHIj86dZR3Qw7c2Yv7dW6tfIUIXs6oqadaFGsJfELC/a/DO2b0iTmCvF44Yny
d/R2T5TGAZLfgZCMzp6gFKREhmjJBk7uuY0YGzir+EZG2M9wSNxMY1NLE8Yykd5+3OzhdSYJiT3c0LiTo14LqhTUHsBJrwLLnWt23f2rIO21GLOMQ0WWsCPVtJLmmJ3M74mTVhYOUcaJBmXxACYHPFD4dY1H
ENE34aOhE5i2EA/B9zl/8RWt9hEOXSwVizsQjezpAWpE8A9Gbed4vuIFUYyvekb3oZD/D+pTpj3jWQgxLLLuej2NSlfK334BBPi7IQRtr113T6mXSJKigmuDksY1KwGCWP059pS+T+P+/3DXVSB6vbVS6dYv
8PCJOtSdNuvSsiVqTuLIU0LYvCXFjdXWbzUYmObcIVgzRsJCLM3m/IHdwr7ZUhebCrL+Tgm6zh5UFsswACLQXRVqZ/dfnYZjmJnZp5gmfH2YNrsMGgY0LnXigjmWI+QlEwJG3ZQi7CGBbxSKNFuz5MLS8/0K
cya1hWnYiHedUJAwYaU+YOD/xg4JkeUMooktEL8Uc6twjNnZ3fhSWfpT2Am4W6cUlUDq8+2ms2QcRKUaH2qUgUPRa9BPTqetPK/fnmBhO3FNkkDfk/y4fUgo+0lxo3+J4n1kcnzqfX9GVDa8SHbfJ3Nu1nn4
2kkXdIG0GxyYJmXSlbp8vdJbAY8VAdrZ2fEedNoLOfpCHy9IydHp+6Jm6znpepwlW1VYODUAZXsIEwV+4I9NfEq1+AP+Qh768zvLu/kGY9kCTzHV6/bHFvDWKVIZZMtKBZ5gAeryQGiDlFZcA3kOsF+vbyEW
UB+lj7gzquttrKQzj2O5CfG9MouHpt/8Jif+BMnmuWw7e8fR5kErcSmVRmwiIWkIDAdne8VFdU7WZ7azdglff4eehhmaPuUMKOAFC7Af8lBarXjj2iZkp9i2vLvc1WnKb1l5ASnvgJpd172AzUW3lXwZcS4C
+Q4AjN5xc7Ui3EP8c/cwk3oXkEZ/kZPhNijWy0hvXDZNL4P7ICKL2xcm9GMzn+3hsHaCy8YBtqSMS94NI6LNIG9BgZo7nEgbfGj54pCTCOl0oZa+K5bnbmV3hEXZI9gsOnlf/kkVHkcGfwY0hfcrsFU2WtCL
ebAXrdWDkbeef0dl6nMajP0+MU6J0EjtQ+1GV+noS1ho47UiQbnf7bryagXaDgraQFkZfF0wY8ye3pRNT3uJAizwCkFHAbQ1nsVlX1+RZL9vPtk+zhboVF8avTVA6EdJS9pzdvDQvlrsBFIucHVTGmQhYn2F
xrixFg8wAWJtZNJgQlUXQ4VJbDyxmguDynEXlUR16TD0jOevc6e65wk2QZBVzRCAiefkPPMox2kNaSASTz4QSEixe02PoXiSfISnT63+9zL+uaZoJar222/KcrFbo0Atzh640ZqQqqSb0yQ02WkuAdxqOUBZ
zF+S6H3PWpyZfCRkPf2gUPpW+9292+cAgw78EJkJlng4f0B0XpEwUvtaZQ/BtfIWFHuzlpVWvdtAv99kO//S6u+RZq0/vGsmhYpJzgFAcK2M7xzJWlOIIFeJhEIgPcw+Gt9+lPsq2f6CWLp9+oLsOqGMS9YW
iFhMCj8yT366m2i9JvzPudZmGs6vzuvRwDzl95D4XX0/6USB+Xo4FNeYSS9X1x+zw5Q1JTD7xJmyqYQUxAlShV7b0sgtR8KcAk444QIIWuccbkbqKXA80JKb4iIAJoNnmIZnMSIcn8gFjKwohibnQIOs3Qc/
JUrfPtABGdx1PiDt7vngO+GNvEv3Ohbb5pK7RFUYJ1kt+W1sWJuaG7Pk0OgJ0b4s5YgigBF59CjaRI4GFhlOV711K5QahM3vm39WpTBy3rsMK1dc6rZoPhvZ4NGmWCUNcEGPnUNPo5mNnOlu6TGpUHyp7pCA
PZaN0469ZIoIThnBquWrdqhKqfuQJS0Da1xEOAIL6cJUH/19ws3lrfd++cWrwvhtDNh+RN/4AFQjszw9ZHSKv7xnEpNrBQG0qBmqH/BfMkWSlc3/MD64429Gj/AcgdC6EZdeykU5MxGqkpRi2LCJf9+FinhU
R3anRuGsnEXN+yKolW3AIWdZpgR8TvuTl5AOvpaoq9E/WXGW1F7WepZ0wvdfbilVbdNNLIfjDhZBfmUDRooSmObRhLMqBPo5ApK49OqwCGSX/lVPFPovufSd6KuqEB+8193OhlWJvJ1V0sdaPEdCLY+7/iAw
JrsTJzHBwPJnWno/iHUeRTTPaCENDLsYvDLFmNuwq+xxsvIi2F+URK6Xv7QkBBfEP8C7HlP56eIMbZDCextqIYXaXzCqef8Uy05ZZEEqkGqTBTBw6nxmazjoUPWvjpEhTlocJhzAi19o0vdjiWjmUBazatUo
New7IrMTeo+7EVPalk/coRaBdX5vHzgkeSPhlVIaivKLLfNVIHPJgttBElfsKbEKEftUNThUeFq1ffa6kYatoOYiKLyjCv3q+JBbhTwMWezliXC8y/kw2K+nMVz6qrGuPegVgYqm2vo/JIsJ6U4RlHRjL+PU
8swiHFm9o9LFGid1Nvz+BVWwVSc+OYnBj/VUpYEW0TYhRwOb/z6SbN07gJYje/FjHwFJoeJ0+2EI9ul4vH/0Sc8TZ9nMTwL9e3zbp2RmPu3uvCZHmd3cWthFziODvAQ29s21/mPhrYs6uAPyUm6pQS77iGKT
0R91DhVRXtVu0sGqN3W9B1w94KIKtsSaHjEdLkiXJu8+wM+ru5d1JM8T6FeJ78lY34cpR+fpVlIt6jlp7hcpDTBP7D9lMKddgqftFWvNPzA88XGfLRAFNNLmHRlgEcZUTZn/G0086sbs8sxR/oKlPNLwALPy
Yh5pw8gmNcqS0WZ0r7234v/WpQmgN79vy2W6wrRXLLhBUoiCs/LIofNdnHiuc4DT30gyeQZFekXFzULRJBnu+qmgz9ml5lBdaDD/JRakuzVo3pxbudaxGPUTIHMINoh1g4XRZ0ub0TfOCxbP+N/2qvIhytmr
Ps4O39Jo0sQEnGypOkTfCP9q5V9aqbCd19U/4qXReLIsq8pfpBAQCC9rKcSw3N3h/GQK2L+pAev3Da0xy+NJs6lfZniT2VfDoKRh93UKP36e4sz8A6rNIUa7x0zntZXkdcouL3zvSyB42ExF7txaGmEab2SG
JLNx15XwVJFoTXM03nwqcnjcNae/6PeIQorKg5Mm4DnzLahkmJNuWLZUD7AUljyiGftv1O2E/xukLnZTsKrb4DTq9H7PYcwl/TYxDy4wT/rlWiXGHdm42cAqG3kr7j28BPOl1/tT4YXYcrmwAHhHC0jPNaqH
4agNyKf1ASOekKgjnmTtaD9eCbf3wS9Zt7c2PUCAiDPl+GRwkkxe0M70Njt5P4jwDtKPHh7Xa6cBJ6yxm+IaQCTPmGgFpfkrqhOVCNoSeVssNMR5V1FY+Y+ssneqrb6dE4GrhOvOyliJj0pIo8jvGgA+J2qV
6RxchaT9+zlJF7vbEC/HT3R5t/2N6Ci/V5bYmBYQmlbOurzd9X62sOcviL9lEfk3ocbiSh1aD1F74bXb0eUqI+4BiJF1uhtGQ8GEo9enE0++FX9mxJ5sVTUFCNEc4Dl0eExqTTGj+tF/lUTftJrPu/YsAU3d
0UUblhr2glfKyv7UzKk11oHHmDZ4hl5P3SAjaN0ohafkFEMsjcgzVbwTqKqajHJ2Ssn6YP9NlZuA5ht/kCNrt5HUyqA2Kdz53xFD6ufEPU5juEZR641rhRAZBi8O2/SqZmtr8Dea4nfduRVF8djHkCjGa6PI
o66Gy0x3F1N5miRbzR5dF292qowyLVaCCY26UmtzoLHaTopfwS/22vnOnPlqypGU4OGdFSfJaunxol/4ZmE8NZqzsjTvI8dNUyWGVeMPT13frZ9N9CTU2HcdyGitDFL4AGJ6fy1lfqwNwk+51FhN+vYJIRwW
+xAFJQjSX48XE+OiP6xlN+aGtF8JQbhZEHEWIwZEps07PjfeIRZEiUEMvf3VEr1C0GPva1cTzOyz7YCvJ5jQ/Y5NqHRLDTFlE+MYdFeueYylYSTzYxHkdNYK6kTF76Nl1Pz+x+2yrr6G4M7ZzV2vGswP4BuC
id6QdLxznyALr9/5TGUrNuTQnJcppdGK4pG3kCdUkwd0UJf0GqOia4vTy2rnDtXHChr4JtSQpBT72HQk8D5wscFcWsIGKLoX6WNcTI0lQgQ7JQHMqH86j1sPV6XThDOzGSEOAEUc9QGYhSMA6ReRTknWoGqZ
/A9qAmpej4gk7qB7sdXhbimum2gKVpHppoHNFglUHABnvQFsZ99nY0A2Mo0iJeMwrdzDOhR5MvfV9L+QI3KA1HjyNJRzlM53sCR+tb3AMsqdh5HHqpytukY4UkdcMDev64zRPpQckSm3S61vxtpbseYze9yy
QDKdw2O0Vl//70h5I6ro/0UyqST7evBm3FpGKglI+3UpgObM2zzJTbtgjqPhd9dG3L+yb1SlLiUXrZoJeYXkpnsw6mI0/QpzYmIAtMVi0Snkxh6Y6I6BWgMADM3T0t2A33cKb4dMfJKmxgDWnoSxAHgs2rUv
NxIPa0gWLlLUF0XXi/kn4aqDysi1Q1TZKFqH0zDbOXDz9GfjIe34qpYZKQOD1/5IbB4iWJV5VIE5VxsqdnafaecbcUgo6oVO08iccaYTC1w+peLPVZ3dKqonK7QLaozi9wZwbSH1Sccanu+Jc2q9MgjeJtUb
7GLk1y2dPOkWjcgoBVYNFpXK7GzmmMuOaoCICGg6oO/HPdgkcp9z12VGiLmMq2udO2GOWLzHhyvY+Ld5voyupf2y0u0C3C9YULzoORrsZcoKFGkXBt3jtJ+8xzg5+RHvUJVUN4l2SylRXXEpw+OpojjKvVg/
SUgads/H3FkfPpLJgsXYWiYt7KRu4WTCb1EOJom8XEPPNz9uiHm7sxzpn8P+GZ9iQ9ew8XOj3yydXv7P0BlATClbvJ8cB0BsnW+xh3JcTLPBa0ZVQJfmII0i1WLJsK+3GydvGfMG9s50DDpjC7z3jKU1HFh4
Rur+0gV07TKYd/9Ika3lS46GPhKuPd/Okv31CyEgyW5cpqIObBv4CcbiKdPCmNF5t5Km5nS60UP9P2ZEWKtaOldHf7OZi9eQ0bVlG9urxwT5hHx4m+mooDU9rV2fI94xHeTNIynMQRerukIOlWacDZ0LYuui
Wp74SH+wboGikgYOt8DjLgQE9qJVM7xVbz/Z4EmOUp32PdP5cYqTT5RxVrZ86LJ7GLO+Wb36GpyvfsUdac2ngtKmQ5j2fzFeQcVKJm6PrIX5F7tKfCS1dl5NvoYLFzK/Yf53QMl7DIQPmYpbOzm7E1yaJt63
+/c1timBXfAs3N0NF8MVLd5N+saPWv3Tb6ItqIRRfODLGrODv/PWgAgQ3K4H0Ig8RAT+KZh4LJ5L8TPR7ydgq1He/fWQz60HmAAWDny/mW4AY7J+p//53ew/AazS2K0qpcZM4HeJtsl2A5C8vWDrPXWK2x+t
Dbtu/6TPNHTCVyDJ+0qJzyLIEdP4mM5+rrC+5+EfYXXxLB9EKGSRtQXLWTdOZAGTayKhPZTsSrE92iIF5ky8y/6U9S3CiUKiv0r257iWaI7x+tVAWREGUVzdVcqzyd4/rO7OMFK/IlDCdywuO1pSPhcx3Joz
Ia8d+hdOFnBGaFDPVKwXZYuoigOwQLIUx/FhN2SwnISIkmeVK54lSBtPs6niBxjsgIPkeuQD613/GBUQmSVtrHWzbe3baVyw9oZCHiPHJC6JZuh6PZFTHCNj667pFxANdZX0Wazh2BArvq05Q29wtzl34rur
tdGEeykClFbYJGS7xDjJeG6PcJBXvao0z3IXMHTBKqvBQ54lMRLPieF2z40HLn/lDdu5JTYLSoT/QCHgtvc4VX0w1a/zhIH3Y+dkoIT4ZP2LFe7FjC5DjKYtrBW5cws0+mTN4EEHPZ5EmVXXnGRXA3MDkgzQ
OFBlQbSJPnK0gD3MoJ77Y1InbnUOaQuJM1YkCwPlMPm49JP97aSTmya2cf7Eb+AAfDp2Q7itl/Mp+d5xIAus4/y1/FvnXitW7xW5rB7w28z/imt44RMrVeU9t7GWCSdKJw8nugYvYByj+l8xgR2yfcQtxEGj
/q2vtf1WQ57q4c7ZsoZ9v6tZOuRDhVydf3x6EOyA+mN3ANrAafS5CD9So/MfZ9uLw1Ty5czWt2PnN2y0y3CahCBPvGESzSzHIGKUOBzkuZIWXOAH5FFmw8dnYc3+SGF7/kAbPPDMHbdjpTUu2Teo9SkGE9x5
IM2ZRa1AR3GFD29Mydjzsh2QFvWS2zAYY6h7wAhjShZYxXsoFkk6KJPMaKX2tEf3sSYZXMBCDT8ZHwHWmt+R8nT0k+Bbin/qxHDMxZTFsNkIQu16Apn+dxF3nKW1Au1IinGqy51aN1NrAL3spFRgeMhPsQZy
Tkw2DkHS5G0oEv4RGCSaxhVVoQo+QTnM4GLPJDqMKgVj69a+V0qtX9cbU3tJF5gAngSPmtJPI+2yfrhcbgCTZyU+sTP+htKK/rC9xZFDNN1v1vaLNqPo2hlzDwdcambjp/s5cvbK1d2wKwAx21P59G5uot0o
fX8ozu5nat/0hvfqYKBO3Gk73CPZ/Br9fZENnG9mPsaUlpit0IpEDlgw4MUJwIM2B/wFKX16AmZdedoCRzGSd30YLrOfbbbmqAyemSF+553LziNPqdDPP6cMwVX3jwPLggkAmODfganTXTengDi+voRtNyZv
ETeH1siVf/VV0ar51RxJzg7r2FaHpvkX21jBg2azQeCFDKeE6Uy/XhoY5UrtXM7ukHT9gmCA5278QfdcZHw/TT69GAKYWDIBcBqlrUuyV/NedH3dEaTXurFOUSmKqd7Uf3TXmYk0+EnwvmeNBn83MY2uW3Bf
/saEHIUQo1NMBG9iGraPJ8peT++SrWaPNVbhjhzcySfwfILll0Jp0Z2aDaaODmw2RzYfjUZpdN1A5MfXqjB6tTN1607mrSgtNGD+N/SAvymlbJcVnJX15AyS7NXEr5AujguCFfH85KlT6dqw+PnTEptDj69k
MbXP4rMcOFiD9GRk5oXEPECEw/pzOfsmnbBcfbE9v5yF3s4+aYRgFMLl8/2F54M7xxg5wciZ4Wcw87+ina07hvzmBF2NPtavZ9QIP4LAyeR9BFqXVJlc649SJC/QGhykzPzi/gDg//A4OH1t6TYFAXZgNdj2
n830vXf8vqI2wOwBvOnsg+DRBOR2QrOY8ZnsRvXvWzFVYX7h8WJ9rsbZ314HF/H1Qz43dVFSn9Osb5ORzDTtzmzpr9it5Rv7l7DPgDnZdGWF7MFTzWfhqB34KLFcmerz056mApXf2d34KkBbMOncQTqp0KEI
aUUWTAcONcrtUsxjdZLsc4unRQtlERRNpjq3eNtqU8h6neMKNx+1e8T9pGm/5VjNnujDDpFpMRDR3AhPfEe8fmxNVBbpUdeexRM1h0yxTZODgL3JFaXhekrLgxw0r7aH3t56JRZgRyCAhmOGvmQ3nmwlNiFg
urJUgt+92lwAN38ByJ++hfX8GNzcoosvxLlR3j5d25vh21BWnnvQe71oK74jeue9TmxRlb13xpWrZyV+1jrErMb4uvqNEQXE5Z5eDKib+7PSNcIQINyGEo9laBAlXJXi7QilXClL5ixTeiNlgIlNXXfPAAtd
tT5fARx8DPGgjo7Kt+U3sO/01AitfcP1KUVvSgH3RBcRcZOMLzXMqZBmi/Gm8V6dqJcBFrwBRLouQhoxxovk5X8J4AJecCPqX9IxBpvHYeRMPNSQqPZHS5+z3+uRpgUUuMYkh2tQYxHT4BQvCIUxnlXPg5Yc
+99RDx3fRSAHy1RUPusSqJb0OhyN4PhnHkYLXPbNYVjM8mHPUrnR2Vshz50euKcAKkmus7qgmRpJ/YfW1KCbpfjky6UzV2lxOBpbTqShz8a25r8zAqrSxXsjqDc0pYPoznIU7ic0aYSMf2raP/DxMpm3DVaO
plsH2KqYJFgV4NmHk/b2F7C0UGngb4O7cbqmKfOmyZeDt6VlqnN6qeDhnlvtXRtjo/9OD2sszpss5AJnh+X6+fSesxoJyhOwP1BNU6NHxsAVGn9MRSaYh43mc0mK7JaARPfOMaSbHBzyHQbE6KMuDDclDJOZ
e2Og0rBcmUfsO3npWpPxbFmF+JWOBPgjHhfnUZUhXGxNo4m6ftqRI2CSLuHHbkCteMzbg94u2muNfjkjV0mBXqYwuBa42VvBhWRqxKAn8YIgRreGD7I5JZtBz6drEPD/Q2r0SkB4RFK6bb1SDU94Ac3DHV+D
u+c/2LWnE4Jz/F7NTnsZrfKjGw44YO1jtzhOWoiAFVHq+9KWUre5kzJAbgfM7eXPCf1wSubHfTpsd/zLTnOlPEjA/MTvcxESVzPlgaNGKV5v9Hl0q2hduuY9EKZ9OQhYFIXFM4BqvO+2GrQRdzacLEjIGmXa
Cvwz78cXQWMPhSX9a0VQsJnOQkm4eVpFNA7Kk29NN7b9POmMxolQnDMlrmbZ7RCPSZh8UtNCt7aW+UGGW8Cue70W/McVry3oDAiDG8BAwDrO+on+JD69z6V2M3U75mGZNFrJMdwxD1h26wejm3kZ4JT7aYLU
qqEJCPeH7T/0+PR0E95zMJiOo4xmIFiqfJV+ecbA1GQb5tEHeJchoFft34X6h1WRvcY3RRkX5zcu3/C3g08nwdkiD2kVwfzL6T14sijHSIox/98kOsqe+r2anbmWChD83oVlM/AAk4AC/7Zjr3u4tJ7zlc1s
HaDwMiViOe/56VR3UWniSmKZJUzWSJc9QL08kIi8dMIzMWowXWenm+pLdM7/WpUwHv9/AiBcaPY4PJO0EV4QtmGvUvbOlCOqupP4opU55XKH1ZyGaVSJ9vRqBllARyqnkQU+Z2dmRQlxJPDdvGhBfeNY1VKI
DDvTPV9D7wQac2+5b5t48FK5e85gW0ALfy5Y2MzkNY/srniNkRi1znYc4rZkHkeGRFpdhsS6gkLk/gaXxAkRLLZ3JpcAwoq+96pi2zwHzmwjRVUsGzwA6dZylzuhVkJq8zB4fYRW+RlegmbupBd+KkGuSx5T
z0Nv4uQRxy+EKMj1qzAClJPLHDk2Fjb/aEz1tftxsqjx7aZ9e2Cf2QWWCIG25okDR2nLlmQLfOObxdKv+DChGeRNOqAl6xTZRmOlWHrh1LNl6t9If173jSVfeifbclVIpttmdZ1W8p/++U2zzoIcXm36lnqr
G5p9Ht/NGBmhRCjyGAV2xRUcF+yT5gLAhfMf9/hAkw7qWcCLpaj4AeT2SQVlvEnb4z1zKsUhwM93eEvEEn1qCHT3wRKC6xs/gM0xeNKCq1MhSVcIT4i5xd0nzxEdH3iwqQBr1SCudhySVW3k75bZ1+Z/GWqD
v3PZnN7R6GBiz8GTo5aAED3/dY5hilR/DirPsEZvEe9j69giXJLACHNwKZ+Do9tT3gFmwGE+cx3toEZ+L7zYURI4GnycabwcGpFwQM3xdW3SR36vQu/ch3yDr9lASdX7AL8P4q00YejDiH+e1jBCWG04CEa/
Si2raQ1ySTVDWStAuODDwEn0ML3B3hjAHpuqlp6IspRemujaeX7Bje0Fm7SJie6BO3jxtI7es9TDLM/UD0rxqAflYKf2vc+rZCn0iez+AEIWOwol0NxKfmz0OwIy/eGtqlkzJF5fcn6EDvKlj2032YPL0fRD
t/h83T9FRuamTs2xgFaY+l//YRdl/XWGn7H7y+uXBRUcGdr3TIVSM3Fgr+ICB+QNl/RHNV7VBEdTBat/KQ8rKMQxK2td3pGn1gzGUxGU2NhkJuO2x1YtqfoDiobMFmjYSSDwp0+4NEeo2VHbbGz7IDi2JpfE
HFAW5aX1/VoY7blk4VbG3Z0y0Ozy93OWPoWk2Lki1Dn6aYWNEwqNkdjJnNv+TNoTOM9WfFYCRzCbCE/uqj4DdYkeEoF3Wenvsz9FD3DWEiyVO4xcrfDopl+ki4ne2ndmCFRa/wVjfkUiZ8uDWBUM/+EE1kbM
oiMwvzTt9ykYya3WDwmte02Vr0LxM7ik7znyRNR1vs3HGPLTfvK8o7S22roLz2nNb4mb1xchG7dN4x+Sws6tzo7um5GvGPM5agYgE06AiU8QY8YWSvD24g65QFAtgMAh7/PNk3RJEZI3VvVTHSEcAagYmC7W
YqSzC70lEUeWc+O+FL/Bk5l+EUhi4vZsqTg731F5GOC7jz4KlBL1omrNz9gz8YdpiTbz7BSQctbRjU9DPRw2g0joLlXQR6tvGWjrEJpPsCwWTsy3lOtQeJbnWEYnzB8ZirML0iy0fnXP1dkQ6fLldDzFUCUY
8ajAsFQtaC46Ikgczbud+B1ghxbFJgcXp6DTlc7qHZY5nkd+GAJk5i3/jaWaKdChIYBKm/NbsOYKiSEqRVGRsXZFX3fxO/tv3b0wYKs7U6vNJzyBt0FYR7xp+84KMsJqRuWn8SqtZ6X+8/f7UhdePA/lK7Zs
HfTcNue0MezU8CCvunrAt2bWw4PaN1WEvKJtPAkMUs7Hzn73mLCRbjkwjcufbip5L88KZx4WJevlANgK8oPxDifDHJd1zC/d5xfnpRhElS/QRzvV0WP138xMGjTqGNuIm+EG0M85SeJrLTZNnAyfT4nS4x+1
aYxIOZupxWG+MCFYwdUF37gYAuN+n13Ri+QWZ5I8zTXtRVQvyBYcbVmcJtYfOfRoQLckGoWtOUWlbR66OgO9MJwNH29RdGf40SFvv2JLvXnmgEOoSYQ1mqe87xymnrES/G9gtvoomEWDSo9H1rrr9veoFs/s
wxLZXoc6GH4oJXmZ0psBvufhnxxkwLoxWyoQEVCgCAjzsesqePCt7LdlKejTsnz7Yuyweg70ResLpH7xm8WSB/FYCDBCEe8EQmBoAnQCupYs64Vy5EPIptuZSu41giuw4qrIWCO5acXDYwu5UBZIZaMo3aO5
6sAPmd8pqnSMnteS7nSOf7YLkIkh4y4ZhxSGT96rjKfOK5VhPWCW9FhEe7e06AjAvA50JB/qqj5Wgs2T8xo+ApWoMLJhd8gVIvT7QaqfZR2djhKFg9HF8s+G4/0l2numfypNNyAeA+dRfOanwE+SlyblPgKJ
94TowAby5+PkrDGZVLjqjiDsi950rnId0jC/6BQiyhg8E086F05XqBdY08N+JuOzCMnzckOjUcrPDWRIMY5dULhgNM0IAcvWbBOjQAdjQ/t+N6UgbMIyBP5vYxGBDty2BBkNJe9smKgW5wUDyAsImUJJcdYu
98YQuHVn9OvGXBT74vjpV8x67Sb1Hawm/vo+tQ1kJa9tXKixyZY1z5o30NZ7NJH50lWydgOBJCtACDUNU/FmiciWLlDaZV+Lmna051rX+LOrt4o6M4Tw8iZsbCdD9btn/mAUefSQ2JLV+IdCTZeAn/FrLTpa
tbsncfS4ECcbT8N5hoe1CrhtOXfdmWjM0LIDkvfXrM8886qLK8Sw7YKM+aFDhQwm4ECN61zq5/3Q/K9hIm1CkUzRkiXHurkzkknaRCImVBaL1yNneAeTFD+bjTDJ38ALwMdZkb8nY19llg1jmV6YcwMsDJxB
BrmAskJvl6z1oydNEk1lqWAfTstSSyu5BzvUVnt9EFtntCXiY3vfQ/CvVN1+fLV/I/13ViVisnX3rgPtal0I9rYTPVpXdyX+x0H1HVEMaWd/6F/NVwinPfDTg1POn9a6wmBt2JfLFnQet4BdjGhp+RNX4DSS
pjiPmSrEAJzeKtTU2J2bnThKSfBvOZt0odpEw86/Fr8PvwuCxGLsE/swL+jj3z7OE0J7s9zSOK0dUviVzYH34kImKHqtNckLc+pBIEGjVn4OxpMFk3nc5cQbgXiJ5cCS6QSa79Jx0887xUxHpnkiVjbdaPkw
ovo57c56kvJrIh+eg3EeGGxek9Jy9h/nCqMx8g3NBHbj/AOwCwEPejqvw/MxMKwIYnytg0qvpKxmRKLw+Sse2ZmO6QWC7jcSkuv6JFM+ZmWWXICM+j/4mlPkThvLciIQRnMfWSUCUvdyTj62wIRvytxy47SM
y2ssiq3rWJy+2qfvxJB5+tzefX2giMqxwySjlKaNfFHy+QZlCJKCCGhvXLx0FnNq6IwfuuKbSvuoY2O0piPrVGedIz42OPsVW+IjdZ+Fnf3WQpjTZiXOssMX8Z+EzlK9N+sMBDWH/hrSU1XGXPtQ41tKyosP
i4UDDF1Iawo8rrueuGSStVJHyvoYcscBujdU2APNUUVA6y2wXywwwHdndEcrbfCLmBkfbrRkAAaxgo72+ATMnaeiBqjmT7T1Xb2d6ID4Tt6djZgzL9iJgK6PnrqLeuna8qPxkti9rNDNUJCNEmEYGOODfotp
yh/Kxij0Qis+uwsQgzjEupYNOJoGqr9uumdirVmh6g6qxd+yyCUQM0HN3n5/vLtwQmucqJxUHGMet4Ip+Funu+6SIxsYCAHj65+H/stsTWU7Y+X+UD2pLyQVs76kQ4XD5wE31rxo0hr9FI94VRPD7E9KZ40e
H8uDrgBOPyZ0JAT/yu1qy7Q2kUxxJJC64E/aiBRSCyJ3Brv04ATfIyZj0odeJnPcUWiS8rta6aCNoGsvYYYcICsklvMPLOxs/X6lqJB45P1zt/DIjWER83pvyYDCnp4ob8sujaldmIdLU5p4kdg78QKfPwcq
Bhlo5pqDcK2fSi8pSNyOuNU15WHBTSjWuB1PmyngPM5djyI16JzY1CtZLRMGhzSMuQKGYcvzBY4xtsMJV+lx8XM4EkRsg6Rp5dtRjiSoPkg0AoJJYm6FoqtHV3OWVuWFAMhk+C5QhLgpuxdJbSHZNytRki3X
EikbypFVnUiLCSyBtHo4i+nmYJ5aNHgjjCQ+QZsWDCVOintgUUisbRXecWCQHj5gypNY8LmlxN7xV4lpYZW0cTd98U+ULxkHmorAVx3iof4lBhADTQLpf6LPby1hppJ08LK8/sfqTjL+XVYV+U1b9CiAQYDl
hsHoarGRzdJm+OIXrZ3RgiSTXXCG2CwAvC3l+woekEJ0Bb6UvP3L2R38EFbL9lO5beqH2dbJYG+ecce8Yv1+Srb/7FdmGz4ADibiR6hB0T6svcpX/eWJ7Y2PurEe5oDGXQlNm/dxH61+NPo1UhWgi1rfWggJ
ZoYQlvL6vgPQcp6QGyQtyqxjQjs7gYG7hQqF9pcAFxk5jlinCtG8fVIpSJ0hEOjpnCy+D0wPQIEGkFKS33QKhxDPsxS2dbEqgXGQt4JxukMH9KdySg4bqsYsH9J+l2SDxxtDuz6ypHHIbm7hw3TTLX2A4Uq2
a0zogPv0CKAHIOOSplrnKOS0gdXJQwfnDHZcdiG2wJg8Vp8Ne4ICFbktMqWFl/nbbrISB11zIbFycV+IehYkAiE/Cf4Q+dvHum2v/PfqapIcXz1SSiee7SpsHt4vsus90q77sJOHH0AsLSTyQY9i2oGGxB3K
bcM0W5U9oVdq3QYHp2AbosFGxcgKG6t0VzVpa4oDEvTdAqi8UOiobB6Agd61QVWnXRzUcbv7QlbH0Ba+4SFW+txOKLNmiZXttPbn+QC8cdnHWryEtNLVwF0Hu5NnRDRREgS/4AZ3A2DAWnDRgwp4IoPlM1lJ
ci0kvnJGrf5ZuYj3slw0nURsOo/CPmrS6lN1XJjHvAH1ayULM6cJXeBtL8W3GzIMLks5ekyC66LIwtF1Kjb9C3IP/6dqklvtKaA1wC94Jl7g/Jt2jYz8CYf2Qa0bPlb/fJang019VsaW/OwlRtWn42ttCEls
6xsmprJXJRr6XJokOkg2iNAwCdWPS8mDFjhB3C5l2siriq3TkfRMhFuevdpnwjKisxKlzlsoPyt74pPP9RXCYDTk9XJlWUdwXhZUnlrM/DZb5/47Sqw+ih9kgzd8cKV9VcRyq8UI6WEfZm+bTpoJaQZCEZ+w
h4VqYMCZpW807WyhDDsrAIUv00MVGOyRQRl9LNADKq3CFZ8PZ1byLrw71Q8WgdeG3Q47+LNW0b0RbMMsTAAJuaoC2sGKKWYtksR1K+rztVJrCl4UxI6ClZn7B0UbJG6d7vbRC1S2/TVr6/dDrso9/ocW3Of/
5qAuiu7zq35ByHB4m3fUcMHiYj8bb5sbpInUsp+8vhP9+oFGg+otWQoZf6vCXujx9pHuhmhmDSOyVLIbHwaD0VJEhGz85Hosr0lXk0BFjT+S/WoE3pCo9s8wYjZwOdiwSEiGuPpOj4bq+0uZFroclgBTBrer
JXKXCJfXb+LeG7g6y5a3V/GrUWSQ0I2MWdTWUv2dsmUF0CTZpYnGex9xZq8Sqw1maWYCrTz5kllXeXnXYRFH2Lrs+vLkJ3HEYQGedfAdSgR2mzbNLAB3JevYpHze3gktqRo6kWVKY9nQRQHoxZUSIuydJF01
ihPu7KHTLd1Ooe7nYjPM28O5UKFy7M0BcH4D1YqV2e18DRNdupR0UCMfm193nrJELgeOtZlg0z2OE+xu1eQ5TZATM+V4V07KCKHZmi0DUe5xr/yt314UC3u3Z5f4H1pqZWxkP5W5D6p1uwyGxdDpiFnYdLfE
YB2Rn85CSLuku9J9cud71CWf7D7WOQ7vV+uISCcdxIzILcC5sQNf+ATr5npGf36BikLeIJBf6zoLoAKBnKvUzR/THSjDEYu79KXhWb9vEpC8XZlX5G1QmW1TUNGp3gFeZ14I+Gb+0OQcHdDG0Rqo38oDAFda
dwpDkKQmUVem7TUBEddy41nkoI6A6Wc2pU2Y7Tp5+ZzQuLxU6m0jF6XEBp4IxPL2c0cmB/OmBNfkRsdVvrLCPKLBI6rhNlnl23KW867JLZQwBBQJl3o30g4zON2E9RuQt0KIhFiYuTpKQ0Y3q5FuHjS+Opvu
ry6DRGVa/O+Xf8MBsZAPUl5GdPDzXFrc9iW2iMgCNjptmrp4AUrL2yt3FUKYhjGeyIgiKp/rGH1DqySKsTMCiQ/EqOfO0MRZ/YQHg0UlocEpse/wWTISUEbgOPaXIFUi0EKIPvuqa9EPWnlBisKdkZ/DUp+a
7B6V86oQ3QW+7WOt/Z2DdFI18eWyA1ynVOk5c+ho03df3rfGDEtlRVDvPa8A5wCVAI8xBWO14aN/X3y0Pxg4smtEhJAVICz9LKPXHzbQFFnse8h3zjCmCmXTzHQAzJ81fgHdRmCS1jUmWQM1C2SBoiIXk8OG
TdPZdIdRXYX7ZhaF3lzvvXg9GfjqcG25juzLz2szcAHF0t39FWLakgB7+MMWUFJ64nTANJowm9UBXJebmoxzYQFEA0GxmqPDsxK2RJsSsDw1qWLon9LWAfSGpbrH7v4PUdFjpcaeTW+9Sbneor1TI+Pjj0Nn
6cBaZU63vWleexBkgZFK1NJxrokYob91XCt3vNEu7kJw5uAomZnyz7QfNpE9HZrc5WZMQrOlWLXFatpNOP/8exKLeyASGMNfEv8P2VNoSN1SJAWeBB9b2nNWhQGLB7GeBMjw2Lh8PzUBEzJqWtz8MMYwNmI8
MMm9KD7CilRgD2EgX5FmMMQUQayNhsMKTFy1tIs1okkPE/xDDWVwDSxxGSDDOAwwXg/VFYWHKvUkUKUyTxuKS6ZzsQCW4bfLSMyYu8V2Rg8Fz3ImZnZ+1tvvA9j009pEoekK/MLb8IStHO6wJzdNkTjr8OFE
v0VznwgVHC6+GPEGo2ny/x2hiRlrzRvAsyZbaM65Mi7m8DvBW/W5dDpoH9icv5hwK9MdEKXNxkg0Au+1Lig5dFpVpDvBrqTO7lEJL+e6iSS5Jh32pcy1KBCixT3SAfnHHzguO95OAYk9vOBk18siy9Vd1TP/
xRNO5F2QDiKuXjddTxTRUZk5WjN22BkX/yDuObB5u2nMKZzuDj7EO+BQ3aJKX+cM/EbF4lTmZRerjPpcCpB71dVx1FbpbsY6ajKeZX3U32ZEpA5o4Zb7QfxLlYIbMLoUueL7EfZHblhKTOwCiev9RAXBVqRe
bbXEt58OwPO9tE6FeWjCtDnnkV01tXRxJAuPm6uPdCTb8+VhftYuicL6vKgQYqVQJiJactGvKdgtaR+LZhAUEJ7SUG1zQGfSkb/ze9GHNFw7/EQQFBYD2EIotYpA09g0PjL0Uc+lOg/A1Oqy7MQhT2g41lq2
sCbTkTkujl6OFfTpAe4+0UlXBL+R8ap85NBw2PmnNPSKbQDYzuNEAr2OpJadsV21WniHOXPxSUJg7RiPvZchpFV6zaWe6BwUwVRLPfx/pji66iABNe/V3HFkuXYZdUuW4kh1nt9GimOW4CciEzt/n28x6O8p
fcZ5n4PNinHWZz7pOXqO8KWKmgWh80RlxGCtrTfgeDr5tzmLlhUtQHeG/7mxjdRoCOSur9yKjIFM3/xgHYY8egFF/WC3IXIfO/ZV2ePx6zr5NRc2f03SU4ThVLSU0wCb9ghiIZFZQsvuIGVAcjCH+EotfZmS
Rc1SfyLyMJSYUsQPXF+IINHcI32+UBF9TOY6tadEM2DuK0Nsov+ek22m4g+vZ0MyADuD8jp0pdtrv5blWrD/sfvhuwT07BI2bWXasLGOaJDUfo8N6l2LkXVHjCKGQf7OMImL9v77vOWL/i3yc9qzN1i1R1Ox
DOcTb/BeX530OrFBHo7fVKsy1mBvjHZbBSgyg5vfwywj4PrT8wacW4fx5JrNvvuGgLkjuLUP962QbOnYT65busX5RV5c4oYAVnr21PB4kDdF/8oZGx1UL0fFJ7jfPQZw6WxVbPdjgdinHlPO0WwNJsux2MIt
aJuD18Hl/n08i4wRnD/rUiVRwhD6B2HQgSk1S0b1HqBcA4MiJZXwRERXpGUwutPa11vj3HDIjv+3FzMVKwSqVwk82AEQMxHBRD7z0jwQrb2RQ0htwsBlTKBbLQbfS1rvj46V99c6RQ68u3SuTJ2fG+SHx2CW
T9nayRivACjKcGTj2CD/n/Df+FPQKOs3f97M9wXe5SjuZskeWKHlZbqQpYMzrRfMACMvUL8bOcL8j61ihLAfBKTx1/BjA/P3kJ+ZEcyGzjtRVxfMF98C39LrUpPm3ruRaU8jqAkiRCChFTm0D11VKoDTUEvh
408boQt3Ph8QddlAdSXcAnTyUfPL81PPlSKvYAc6ZURHzR+iDUmu6F31y01R97LyX4Up+3oWxcapf0ERLrRBNxb6T+Xrx8sojuIcdNoeLEg9OZieiYBnphsIm5z8yIuGOFFFZ0Y2RsyVIlOalfuH7qiIiOSc
mgtfyEhpAIsJuiZ0not0a4kcua2N9vMddXYfulilHjCRU7lTWWxWiMl+yH87OkVPdy9OzRdPJSYtmp3YurxknHCmhnxdehHYFN61nYRNKbAiV+QztTmw7D3EMnfju9T2+fmrZ1bZuVfy/VaB2i8ChzWMhJvP
ubZuwjSbF/DfdpcKK3SV/n4x5qXU9A6fBctygWz3nwsi+WTTpEqZiDPUm7jh1oFjzgamfdJ1OGmsimA0XBC5EIQtFnGH/1hZk+EByCRKgfu0cOSlJmIY8UnGl5RKAyCOBFnv/z2RPwP9b62bVuRzUXGQ1PV6
bd4wqhJDRIIk3REt0j/AA/cndfQmDwRKTqLkG9E2kqM7oXosYKfgKx1GrtmzQzsikErPY8yOQVm1xYIa/TQJl61eYGBEvVq7zPIN4M/P6mIDaFheVIq1nsO0EXB44EaSnZfp5+WQDTzolWzhHMSJl5B0YC5H
3iJ+DQq+Irhs5P+bLbV61EeSOCbynxJkNB38UUa/vNghK1enMy+QSpiY9ygDg7J2IjUdyZcNcxAkb+QIUTPdF8PH3TKSh3OKZsY/WfamfYHLiX3Ag2D96AF8nUYXbn8ARKZsVIiGChKDN+Fjk9G4OMPxn8oW
uijxqtvrWCCaSYodNlLYUxqaPeNM1aDFdaqsQ7xfWEaf+TyplGh556voJGqkPW2HSvcO3z6IXpMoytd2kU4oMySjLInjr1HyqqXWFCXQZj5orHzcM5HtM674HIOllGiUgkdJKOp3qlOvdRo+xGv2SmxFS9Xq
cDuuSArlbmOmYqCa6arY5ryhflgzOkfc1eZa7Vk6o7szYv3xOPjjyl7Jqd5VQ4ZYWVL+UjlqxzRmxktQBCrSDY97abUCDaIOEilxAfwD7ZPwVo5HyyIKQaVB/yVB6W0wWx1PPfEsHIC7CdKnyIL88Rx3BXAv
z93QzzPfSfJJRkCXuWWcddBfh22rz+TvA6i53dz5lDf2VdQDKi6m0wHqphMiY+XGzR4xV5TzD+NMeSk+womxa5qfEufF9dxq+pxL7/V45QNIvek6RG6ZehVPVpVgmmL4jUPzDFP7LZa6c/myWVJtRQH3vFKx
qjZy565oCWvBlbzVCyl2VVNWWYOVlm9id0wLs+YLq7iGXxETj+OhMJS69ZhBXUBrEJdtEhLRvsCtl5YuidXt/CJIvxgIXOkTYDctesxPwBunMoNeUL8m03CNfoEayuojigFlS1Hg61Bw3Kum2pD7EDcaHUM0
H50omQlJfHAsSNAAQBhYqFtySMzPxdMCBx10xRA/e6f+lEWtaADbzRLwFX4wMNtoguv3s9+eRb6XtA1fV5bJuZnqr+ZG2Eh7xQ6+ftJ0TTFdXoJwleDwXVMUOAy5Yshfw6S4Hw1yrV9vR9fNgbiIsTbY8NJp
ssy8D2bviqtpDr8ijL+Q/IJdssouQaBOxC55q6m/T56eLXESrWsTdhe846KXCTXRLcQdgCqIdFTnXcK3L3tVY4GQ4eIdqQ4s8Vq1oYY4KovWlh+zVq0fqtlP1euBkP4SlvTJ2Peqbjv7vVyTXA/YbXtJBnA1
4WasUmARZ0YKJwGLjMGw6PaI7gPLLEvnagfVbzQpgQcBKYEO/iNIA3Ef7uzPg9yyiFqKpRhW6aJPSIAsEm6rXJHLUkcHvEfj0UxmZVgAVOFv/rg3uuDoTAysiqpyZEaNlIZ5kI3BKBZKw6qXd8x830SNUbNF
nhMz2hmjAdAzXnEVacu5PibzJ9LW/BiN4Dc1RE8aa+1Q/gtk5Gj4ONTL41jvBBmJah6X2uOi9vCb6Plr/4gS2UG4eL3+vXUFXo0PNZR/L4ZJKWW0104b10veDY2u7m/p3MxXOcG3BEu7xf3bk0bNroF3Fkou
DgRnOmBra1VyRQFuZau0lKelmxowMwd17QU+cTk1XepGi6qg3gq4PrMp/9FUKecnf1XufEbxGovD046iTvYq8aTjP2z2ZPt3HPJLibSeGrW268tIztXK8A9XTn6gKQr4fb6Y01I80e7MW1wkaKE/ok6RYqPh
iqjrYZjgQnIRuJiluK194nejr0MYJFg8kR3FuamLfe3KZNgesPNlaibXGAlidLpEmIRAc13ySMxtf9H3tCbUPHS9rSe15XTd2EeTOYBaQkYGfFNym9jtCge4hUA2BjQBGzZD81ZG5QYI+DP1xZAhf5zr8kkV
6eaIQuAG+xZePDLCUqwd2lOP4uHfNdXuDB7Ok/Euy1UtKTkto/cWPl4iGyNe1XLYUVErTOpoHAZb+Wg7ncq5usH+JS5slFns7SmNjL+LgtnZYQGudirOtpcZ1+itY2M9Pbohx/BIPR30dgNLi9wVJhyAXAu4
8nbHSJEW+hkomcZ0ZyijR8MtNMhj2npEhLOgARpGTF7FLgnSaxF5RNbac8+snNG3s7tumjY0rlUlaCjMdHz03A2lx+khrSW4HfjEqcc/Hq2npxAb72LDYhehbF6uRkCq/7ml+hUhf3HFbc5DcQ9MZprKWK02
9ltbCSGZ8kcjjzcOA2mrB0gr8tjUrNKnZ5SNERAcpzDaQ+qZij13rDouluMU7nxNWlEqVs324d3fSpNgUExTScCXdkOKrJxQq7qfXp6FnQ0W8TlQOvelfaeNh7ssni1UhuyZKQO2wgfLLj5mRYAF6EXAFHIs
NNMdIHcqvwWKKer7uplVukPeSNKrQd/mfUDHQCm5cBN/3z8P3rAeHXgitggSiOYoc4w7BF104mhqfq1dYjEqGj85iNrepR/e97GbO8zkFQHCkDZ31yL9+aPyWu8qI/KtkPU11m/wJL6XggY2xMC5NajBzGTc
K19ZQHZI61x8Qge9SeLLJbwzNsOTZ2jDvnlYURDGbkPvnUX0LrferisEdcnKMFjghzIBZceyOeY7RfXBMWGojkXCyHqN/SkrHT5FWFeJiK3eeWfTlZYatEkgflYSnIpNm9yYcpCzM0OMOuXYFR1KWiCjMl2H
vOMQjUdHpnxA0D5Ta+xtekAvq+VlfeVC9qiOHOTq/7y/IIgr8nCUlXXdxBu79yzHA46FR7oduikOZp8W5UJ2bo/hpC1xU9BW8SglQ6SuBvN6E/xv6fKV39Z9qkYYYxJ5KvTV66VHKheg4Ml96YoZn5BriLAP
IS9M8z5TbeuDmc1cBArAFgBuECP+wuTYCoUJP819WPgcPK1UAxpCa0HCgHsMLaM9fB66YHAqLwMhc/OpZUjht/HlvhFVTNIO+oUZxXCrODCusZLWkpNcI+DLPduifdyiiIaGhsnTNZ7M77Y633gU+4JRH/2A
eqRyDiAqHGOI6zZXeob5mtedH+C2uOFRL+oDddZe31oaFQSB09AijHX+syxwfQ/ga3CxTgHkvDdWWPn1gt3PO9TIKbDoPnOktLGhlZ5RP67R3LPDT/5kig/sPC28+iO7y3T8nlq+iCrbsQUZ2EKaxw7FMBVi
ns+yiIc4oAwrhOrCp8ODB2ZA286nmBMTRo2/0TjBdt6iUks4NObwCflqQQ2dH8pCM9Pt6xnaMfRZIJw66Yc+BEAXBE24PCYtgglAruaqjamb56xWbqM0GZibhVGrl+Hg6NzLc1KENl+10/a7KdufrIXf+9tx
td6QRE92dFtST3hOk5gWPM1JCvWxZehhiotIDK/sQY+6g4alWbk2t3aD7vJ1WgsCQqsKBGjK9rXRBm/fPW9QTicRpDnHVWNueOdz5UGfJepCbBOp6EyjwJ2iGaQTG4jU+NYr9zvYlXIiwlLAwGNUzAfbFgMU
PKFXtj/5unbigQ/m0JiHdz0V7XCCUNq4lYgrJEIcZz+fCCw7jwvdaZJ5Ps+29fs9UHuDnig66GZo+NB0ywGqBANIIVZn6RdXdr+qmOUN3ibvbq/aDlWgha/hp6FmIycupYptWDpsglNKWfOwbXz0x6kxHzQW
Tit2heAg66qH2L+etiJBlbh9gCgSNUp8dng+Y5poRxO9dl0FI1UQCl+pvAYZ4hDVUO99HwXCDdoaSP8KaGmo6BeOYQPmGYXIADlbe6GdQdI9dIbas37sztXxYDO3D97+y/pzDlv3WlzXzy7skHMkX8ATq7Eh
Rw82Z0wypr0Y+RB1g6DELi5z7NmEQX9EdhGL3Y04PR4KIQ02aXb0Vvc5y5eMctcRRm/CKNae591HrcAMiEZcaddcwilhTnpvQ6TvfWpyHCgvaBU7c1n7J5h5JT8BlgrwAdh+hC38qqS1JYsO6gla7fm4PbOK
lCkvLtUeZ0iUDyhtTTq7/alqvZkRUZD/K8hTFwiS7lJycNpsvPT3mn6VSPD7rhKYXPk221094tKl8r3770j+iUGOYtXYiTZaK2jEMO6k/1UBBiJw2QhkwSf1GaVrSW/ahq2uEi3w4epN6vDXa21zbcl9pVMA
m/OVJ9fwJcIQSBCC+lLIYXpAfz7OfpHOALNrXrZ+fxctI3RGrMt5tje52S1gjMjnqk0a3lBh77+EI968fNrSOfCOboII+aEeBXmNNlsJP+b9gDxg7E3zLdQbV0+OSkpAiv8lqwUg9wBqEDJBeTGPh/TWUZxB
e2D4t1QLviGGeiyjNAjkkohR50HjE3vV69uCsoPVGeBKV+uY1RKyaxg/9b1r74b/T4qhVFk20It0iqvtEI6LvTMsyGkKixQaMF6RCGnLK9m+JkH5CQCBPMLsaQlkdfV6zwAMH96bG4c6ErnTGw3Xe0nzEOuq
khOuXbGUkSmsonqqFddmsUxEfB8PlFGFCX4a50O68us73f6ErRAhM5Eh+usS13E+MJW7Z0K09rnyhjw1PFU4jPq28LZjU+6vdm43KoqiScZ/jj1E+7rSuHrlwqpAo09x/6nkc6VkjdlyE3mNaVThg1PzC+4/
gCIXcNnZfOP7J+CXQg8joEVt4a6w4mIcwpRcUa1//B+BbOa6nunJGHQfrA65FH2/ljAS41NBHW84PnnYUNeFZzhhkxm7Vskj784STf1DrsiI9g1Z6+lMAHCkxFXDLuLZXzyj/JZTMQf96SfAxsTJMOOAiCB5
umHvfhuNKhH8RA9LTQ/lXIGkxpQBmgtI3GtdQr8vE7fr9TlQWJhus2RS2pFDtz/1EOrZRazFZyIF1Y0OgHs7ing4x69+rgjdpKn8Z1qHF4I3TzxutSZfT53cKh/oj+O+FwCw40mg4ZDCAlBltOoRpFMAA6mS
wHEeeRNeAk3aiX0x0dacR2EAK48GBRo/TsupGn93r9b8J4ePs7+X1sqZ1vvwS1FYg/9XMpbkR0pNU5DfHBD3mI/hnZANMyW4FlbLzRTVheyh74MiD3JLpFp1+1nh4nzi6DEn1w8PhwXlLMF6Qzwg2m8z7f0B
VBnyvZuTvDOw8V5givvhGqiQeiAtn7XeAzrvDzExE3KwqNKnJaFsOiN3XMQNC5+wKrkC7ymEhxbhz6MvyuVJmkjfZgOggNLLnpqTt7GwYHob5xSy8ZB+/K4cT+QljfUMoUaUjindyKvw7cuflUVNNXn0dqoa
mxaFlPpciE+30VOmrxbjUEvO6C7kGikCvEzDtuaoJ840CiqrUbeAy34TtmIQm3fASRgEEun2XFtL6UxnajEngy6jkKPqE3Jwmvt13OwSJrikHCNfwOOhM9G9go1xyVyqGzzi9bzumzm4vc0ieLO0KuCoBxKq
ow6XSz/CoOJca0PvuNgQvMG8cVwq2zxyCspFeUUfjvMyJL6wWcG97GYoMsD/79DlG6ZoaBAvTSSuGM3SIFzjUoYJmtUe9iE8GPytE+9lR7T+ogArXrhBJ6LSm5LucmD2O/oQijp4bh6Pxelpww6A2UFHYHMs
2rodHEadugjV+/QOP2aFxZxsGsrp/uwoljtEiZDcxh05lGTAekQhJdEljSpJ6pvsGEejtvRtEuG4BWsFZzvAGxMT8Wt62x9887CG1H1u88y6xrxF4iTEtuxvuSBhowRde5KdDX4wZe0d4T5nP99NIsDGN+//
mIQGBM6rW9vwkqBBuokW6F9L91ku9/F3ax2BkTyzETYHk76ADXGjwCTHV9yneU819xw4RACIIhAT2cvfdt9WcBKEjzBXAds4Nc/nenMks6EJY96ATfvIHbFgarPJSIgXeu9NeNbY4IiLLNqEbVeSNy1bC/I1
m2/Kza2H7ZVeKPXIBIf/ysAb8NVsQf5bN+TEJfxFJ1yw9UOPR7xZBWGRLganaKA7IpWJMRvppZLAcPNHEz7SeuQgak3WURPLuU92wils2xhkTVPQ0vr5Mew9jzs7yD7LxJqfqjy3JWzCdR9ezoNkfHVIEhLa
BCBaaaV53b7t8UNu50lH0U21AGbKgV/oZF7yEdScoJEIJoUE99oU5/xyo85XB8G1TdYN7Fwq0CagHc29SjpYpvo9xhnLgtrFpyQny8+VbY8ENHBO9ZniUChyzg7MCdkdALQziRCZ4VclpSl2ve9OrYlWK6vx
7VL4Vs2ZwqlcFaMZHgi9Nnaafj4Gelwh9rbS7nHF7RguhC5Abv6ejXTAFh2q3hMn0rs+tlsdWOVHdCcOKN8oTvMNZyQCTN65K776jDhZvoizNn70EnCrQh2afH9msF2jnezJ85ejYzShpgpl069UnCR8DZNR
82eSMfpTURiVM/ZkkbZRg09I9Cc4NGXl+DX8doxbbPp81Bzy6BFylwyopen2GPsiuHM70rHmYeP3Q9l2aejxzAS6ZyQeux9U9zSdKUO39B4LtSD9Fsc5nPJo0xqtdOcpqe4fOM9DgD34hPY/U5GxqWjDBtMi
pWqRYG0oXc4+0NU3r3Wa01+/MBdTII1L98tkzclTAZKFF2PvrxJQFdmOwrOucT0NPAJ7Q4c2d6FGZjk81ycyrSDUHCAjR4F8g0RAIcA83jQGNvISjtu00QVk9UfGs5Y3px7gOtQBNEDy5yro1ANv5NuBGYaW
NL1SppavJJNlZwqtmHXIkc9E8tTm48t9gWn3DKlqB9AcZtjHI7hBJr9rUV5Hrfz9MxRKfvuttiC4n8cBK+pq++qFWbJzHbMMWkFB9jfq0b59EQZWzt8he6T5UytaBXYAcK1fxqRcx3OQkLTDruLqdRG4S8EH
SNt6+DqIxWvkmnF+gTvm/MmY8a6hjxvKXUPOdEs3tw3uYzok07gn+6UyT2VNqMWyY2i/T60oQg9bo3oHc55/poW7a4v5wgnH06PmOlmc057Elc2cm2G3tDinlVa8RV8iWv+3I6W0qWAZcaXyujZRKQqLCCCm
kcSvSJY4EH2SJhD4ct1sEaXDROTYNbC+EusW+kB3WdiD4Dm3Y1EL6QsDH8QoAbLSN92of9ws6bSx5oUHZA8uizAvgz7gaqpYu5lXeLqAtY2obHAyktlMFeSueg7VazYGCD/LCdMNuBSQdfV40GXqQWE8UzQA
n1o7/8cXBQZT83L7Z4WOF/2GAgW/iMoRm8ChlsDBwG7Q558/ao9hUrHDZ2HdKPhk3A2ZEf5oN+bkZ1zwmcGLgNmZhm7t+UxO2k+j6zh0Su2IEIuC3JbNcnucEV8Iw36d8EdudzaIF65oaC1xmiFzvJ22Enn2
6k2Qhzkz6xkL1DjqNWicH5AtNSiYx5NwvKJk5t6XYZuL37XMQmFr+GiQfq1IvjzzipVrNj+W0NsFh4KS01ASGxIyNHgXJk/n2aOgRDLE0OmmUQl3/VE37BX6C/7rEDr+DGjFngx7kiOmT9Z9vxsOsxi3149W
twRPaWhOhVvS2YQT08ELLuvggg6z94FjSQOsdt5+Iv8e9m8ZT9ypp1ZUXyE0Ph+RrmGoEjzDC9mYxbjchKusWxh0FA269PPdtxmbr8usUVxzGOT4kHvrmEV1nORCzyJ1rZkF0FuRwfqs2F78+T8KkdZnr12d
w13+ZbiV1cYvIsjIjjIi0rBDP7dSc0M9QEu3507qyrmo78YlYY1/CyXHWS0YrPaxvnLFVufEqhgtox4/qTjTT5XiFxUb/pSn9nIelE4Pfpa1wIoCw1bO2rUA+kNqAfOD9yyYm4w74ZfHqnT1F+hR2GCjz5J9
jeUk9U8nyqODekAK3rnCW9r+3e8q0SwYe0RjBiBggdgANQPoouI9lydP6TfYgp6Gt1ZsgExwREqsdtzYa76UXMemus5xEgqtvL4s20yzRE4kZXE0AbG5HAm+lK2EjrISODkMQyXU/e9cNNQy8wSw/S4/9K0I
iTGe23htH6QrZL9zFo6iTfOKJDhngCBblD6VzR3aVhelujqE+siE3keQO+2V/G2Vps9IrPUXVIWEbAijPc3Ggcf/YiDGsI1xBEhfGkLxZSOGdnebv7KTR1yQ1mLB/VDgbB5V3LlSoFTPxbE6Ambgxg+2+QrY
g+kYfLLZBxzRSsah5/rjONFPJ81hm4hhkDkb0kwz0T968D3KNw1sNA3xcMorqwk3qXZddJ5hLQamICq5QzrybLlstDzE/2uRDiv7AQfPF+TsnM1EXe2WtvNoYUFF5mUp7Pb3x82Gp6i1gf4oVElf30mo9UXJ
O0vLPco3VKThg95UHKbqJWLgKIWda/eZJwDrspf1f/GLBJ8zhGAw8qYJrKRGtBPCOLvH8/idqFC8NT55XACM/rgFwdPa1lUnE3oq1JQ08Zy6sRNpCYD73YiaEDP8g6yWybnUho2nJPb0ldd5+hpN2jnomRXm
yhbwae7QCDt5TlqW+d1JmScJQogN3LwuvqTensjbJDvgXip3AKDLRdAwJMU2O5YwntD6SEE8haVii+NZhR+ZI2lu7wvyqduF3aAs9G0aXjxXYL/SOSJo7GJB44NLABds45XxctVEQEzvjHO3RSFJ81jSOLqR
xbhoZwWLz3DJOuYM52xRSvXNCfjuxJeer5YgFArjtMo19hjNe5KI6yPlaBvfo4NlphljTAfzPWkjeB+eX9G6JsaOfB9tSZCeM0x3RlnU+ZhoMg8WobD5EGKPnfdhIBPDiT9uS3ay81w3E2o0OQKDaBOZgMFR
2RzF8Sj76Gx2Ry0WRNRgpWOK9bNySlusDGl21MpsI1HPnyiKiFhBDD6fX4sdTGGO2JxhmR/NYS2YJmCwjEt3HBA5vP1sEClNJzVYU2NYktkrZy8mv8pPOWDBtMNcu1E7Bf+p+rpM760iqES6YKStZTi7uZzL
W4zYFKx0EsDCOsqbtP5Uu5B4ecSXJjz54B85R+HxVRAm3tcp8FqQjuaPXAc8XlhAXL5whARCPJwnyywBbfH+kOBH4ulZcwK/wXfnq8viX2ej06QEGqOM7o9fdGH/IV8ivqqccTkp5DHv+UOyAvMBhtShlQ5u
ZHcDEtleqC6Xr9rGexz/qHLRLLG01HoFu5/J3yrem5ruF2G3scEz/dJ7EvcRSesyVFZh96puSn04u899HTCqT+1Pcu+uHYOeNCtyqzs3kFT8LjiOLXpajYl8GPlYiFXVx01msmzI67xtlM8/QKFjTKFjQt/b
tSJlfBKQRBYQxiPi/ZrXAMTIktDj1xmFeEa3DzaEsRzqLosCR7ualK6jSnQdUOqbauQmjYMwATFVy0fHaMQySkfeYuJar4Rsq0R4EEOFkfBCj8s9lcoD1Dscf32hTZ19j44pc2pE+fK+OoF87MhS7OZg2TLX
YLt76T7m3Fi42d7s+VZl0WA700UwGNa0YcatejfMfpx5DYd/ZCgw0Xc1dXDXssFXlAhJHXnYFRkzS2PUqcVNny/pMgIUjr2XccwJzNIH7khkkPj1pTckbo+gm5QjREfMSVpbbR0jQEO+3E0WAD83NmU6Gf1e
dTpFx/p4Lz2J41CWHBBTg03q8J8S4I2kYkmG+BWbz9SYAqffFa/l8BG2Er9MY5BrRzyf7Nm9f86eBjP9htBjYPrj8F4DUvqFTn22dPI0umqBulQ4/site4FAItVmQfKaKe65Fj2DBkmZZtfAZ08eOhJKDBIJ
QzImMrXB8tOYKfVmgqzQ3bSt03Dj/xtJVAix6hxvvDWZ8j1LHOLtsqHtcA4D0v9Xq7tHtyZOZoMAW9OipAVXpaea+B4zSTvaDKVyrLWCHMKktHkrWP6nGqm6YJeNfUXh1GND7emCVk1v+AQjUDAfO6ehUWQg
l9WYb5GlCISV3MFdL1bAe52I0p5kNXBvSANi67JrghuKfRhh9hu2ry+vAq0OWva8T1UAPuDQmRadFXtxpfINd+SljGGH27ZOSKQCIT3AJioPSDQ0uNHVGvg9GDHhZEYgkwwvKlVI2HkeoSYN+swx8dgQSqox
uNtmTxZwy7uIz+1++7b4lejAstFrH24Tp6qbf+YdQ06zAv/DRjiay4zCCN2S8HkG6N7khUEIM0r1aXrx3qV17QH0TbA77mfYqu6CaAr/hgFiSPhfmKr0uynoDC1w9cA5BBdsI83ZecgEo6zJdQ2Ur3BY6Hfr
AOV0iXXHEkLbF6TglMxnedz1NDtO6nKQOIahI2bcMp3UU7QgxG4mg0meTkaJ2n6tiUslhm0peYeEKq1Q0kskrsMA/G357lAnzCDZ8HgJWCj42rZs5Eaz6vwp5Uo25vSQPwFLuhlWM5j38AcIKBACIsa0QPxz
GdR8RZcCYddVlp9J36TIvO4B08ZeiZMVCQnBUp1z5XTHgzs1HJJwM6Sjz1XL0uHTBiQVMm4il1VvorfXXdtRKV2Rb+oRu7uB+/qalTraaZyahPe1I/mxz9fxJGABBnkYH8ftYTkEJ0dbiXW1G0NJmHchi/I5
3BKnUiGtBz1mOg6bAENbxPsW+C/NohwR2dsGYAvsINBGAzmyAfS04U5gWtaVhkgTk8fFEMqLNvn4R4ABVxg3ct7Y6r6R9LHkzvTtswCFMdW88qpyMShpM6qIbGY90CW/Gvrpq2u/sUZ1iJMjZ2AQkQ3kbvmf
k8xNR18rAGFPq46Z0HfAFYiWvLH0xirF1R8JaZvjfcuHE/yhDYybL1w/vbnLo7ejAZgYEnWUIC9YC5tbWRYmWKypFNC/ekAC11HvFozd8mqUaCEZZtnWnkCXDKywPNoL/nNXnr+sEru2WZt3ht6g2+T4SQYm
r8N49iaKQTBJTQOAut3UwHZg6lrxhm8SkRVmpCN8do7wJ89i9pjq6Mm1QPCRGFwTOHYcMieMSBz4cnKbh3QahPXtb2n65SGZ8ldmuCByGCuK8gOwvJB/GntGC4CBZ+xlYHe4pbB2yC181nyJJZcdgg69B/j5
6tPyExJ1FuPfbDN0eGik/NNfkRZcz4G93l7WAQnor6Xs8kC9gwzRoK4t+X9t1GkqcuS4BltSmbyIpDSjq5EK7JKfc5pfiLz/kjSof18IwO5/daAG6SBDvVmBTcuOlEZBZx/7li/xz8yj2Xn/WCy3DEqEsjFR
1rjsAIGtfuQ8u79BMnIldr727Nzb33VF6B+wnrALIS+s8AUfd141+i1Jrvy4eHisjFAm6g8gMjoQJWY91OPnN7nC83N7Z8Z38Ht5XPSiaPndB2vWbxO5P+MzYJz6i3+w0LMRFy/lNqZgltBugRyq1yj+PJHj
7j0uFK6sn0wxXP4uXrZMqN3yzBh1Ro2CQIM4YVRiz1trxhywQqpwHEYAG8MSTozNKVMsOXvzTDMmRHnZ68Z4/c2FyvCyK4Z0cZ8JBCgceoQVsjK9cFzWd+ukkp3SonJsLolKVIBscomlBXbesVchxLszg/qT
Na+P0ONm71xJsVTBfV3XbkdHLEz5YhgrweO8LXTm3Zx4kOjFrBQGoX2Djm8pyXvCM+mAlHdGrAM4UB/GZq5m1KUFr69sZyfPrOuwNgoHg33S7otsJAuqYZrhSck3EoRr4p0AX2gzurimup2zw6ccxW8FTpQu
oTC160cY5mt50r6oV/FanyHZH9SOTdOLbchYUaiKGcE5T0ZUSJ6uCye8X3FpnJCWNecv6VGUkzkO87G/Q6ad0bK9FB+wxdE1liJYsKIxC/9GGdmShaWGP3AvjfXA8T5oiqOZhU1YlA6ioYtj45w2sTUMObg/
L+Ozx0G7ELn+THyL5Ft5clAVv1XzRkzHBMJzJEmqP/R4XRYGVufD3yJf3EFCKmaSfcHtgC0Dl8HPSxMMBA3/dohvHiQWZXWwcmyN5Purczdi10Bh+n5mbOkmkzHXtbjNSRCbsa3aT3OfUSv2GbpfjpSZiBte
tkY2TS2B7P84WFi+6m0YkjsL0+90+0cH85KEMnho749NXaYz/iFvGlWSVvHQ5EaSBsKY7vFxN0JlERDX8ViCtTR4OOIP0JWvZ87Q11EcGYkbYGHLMRgzjxy7vQuzs8copVjsnYqWfgW7+vngnYL7YyeLv5n3
qjuFXv1WAl4tqDtdnegF1t6UKXX9bX1LsOpEo0EmcFlnWZBMxRqLLUWHeogmQmgWDXW3IOqG9NvnJjYdELSSWiCYgz0Ex4cis/u7C9JWVzeNhXZNWGHf9Ly1HLgGAEO9XGihounyyIynI9hYKyeAoW+ezVal
3DDkug4IbQxYp20wnoxdh3Fv6rSAIN9D3liuxVr+lGjD6UDFEtM8TYX1q5qDQngkEhIb/Cx6mR0nLv/z++rTQ3n0nz3tISsRTY3th4l04rrpuniPLUnGGVH4HLQ93clprYetJHYCWkfqE8PEDUmuTV86YtAB
4xNifvgXpBuHtUeFQi2DEdHV7+5HXjgmn/EvyhvB2nKqYqCJCjFvk7fABVGgVHictl32709Nz/dkelEb1NcPDCXG+euikk6taRvCJLFmtlsZWYz51OOtw434beHh5ezPop+wjkWz/6qQ5wA3GtJiMvvJs9W1
GfdnA9nPtFoQEZjf0ATuDLaUqQPH7nRZjpAnfpy2u073+vg3boq1k0j+U5JR3+tGF2Q5y9OYip3muMxuGwrTaehhehDSorWxandPA3T8vQ8L9LWNJ4Lh1ouHCLXGMjpF6iPTBTHZI4Bt0V8FEwtSykMYIOGn
j6aAwSPCfYWXJo/r6YKxwP/9rHI9NWR3YJfUYH9yCJ/7a1KlUCq9R0tIALcyGAy/G1n6Xx6P0Fk6e8gcNg6gmdarx7PgoZ6/KZibATIk9XWyphXR3Ko33p32XaSZy5lGnzRvr3NtEGJetNpjhv/9KZZXPcl7
FwNhfHCY2dMT+YfjZLLMoNkQOfarDTp9N+oIPY+438tGPw6ztTX0QKF4XTGc/N8nycyeTV4sCb2wYYQSkcCDhVODWo2nZy0Ie4ADS1dYoKE0ROE6gLmJD9IKLXlmSsxwD4cn1d8i78Y/h8+m3Q//Zd2XQ7zO
xHTkr/ATJUdLfYtIrSXBB8T3ypuPr5TjchgsbhmrItkauouU2zvOL170y51XJs8dPt/JqYt+th/coJgJpwOu2cL5BqJnLTfLuI0M8lXzDUcBnuaNNCZ9Q49Fml9AciiukLXQWqcQXskshYjBs7q4uIPifsL2
uUWrmFsuy6ymQe51TtlSg1Y1wJQU6TUlmrKTqMzqrDo+hDiQLLdutGrWMKQa8DKRNUZdlp3TSwKPzH419C8F3JVdzmSYoPD7PbUW1rzLzFH31O4Vo+3yJxpor7k2AA3iIKQI7CYjK2Tch9loL/PLuPP6qzAp
oawEK97yk30+s36bsUo/7iGjd2DvyA9gM3vfjt562qNGGn9vxhAH5/8sAtZbENjlqad5sQr0M2YTX5OgiFxVZD4u+zXGlREMXsSQQB0r2GkC6zSiAwIETyzKIGj3YU5LH80almGS1MlOBbVnVFfYC5bkUrTw
GM/P2lb4OFGf9E4cpQf6GBQRmV/P/upuXjNNqnpLvKNUj4xpz9fyNip0NsX4eArFwYuoRfc9ZSVfpQFhxhhaDjDrHIWAoy1kPqOlvIfLHuX3D4NUJp8CYpe63MEaOj6mszd0vZC036flR1C0acIbi3UcYs9F
rgGriuivXqxomCz8DQyAIVM9sZH9l/mqaXiWKEgsYXkqv9ACO2iCP3RBN5HHtT6fAm7iBQyKEfzc+7bHg1Wmz2WX3PciZN8BjIHNNKKhCAIg26FrXASiMso79UTXIt+9L+OCMRk+/04meKWZa0Lz2vhHMflr
k7P4Ci58YhErkbzegA5YU/MHRoG0r36qnA6UMgF7iry/GSwjqnsScgGBep13o1eyvff0uiBMYjEfq2qYpTEQ5Bml25LOZA0uk2KsfIcFj8NVLE4KzQitt6ijGWV46XjkwHYwsDxEHXQKe6QF+EVXfNWOoiNW
kIdoiT+pOse7sJvyXks+5EfAzRRaGwAqNcErJXiiIpyRgT3vMrsfDELXy6PfDGw+rTiOXCqZIx/hdCpxQV+Ub5bg9Y4e+cLStekTRoOPIE0i3hSer0k2qkJdhLGA/CTemzJqSmqgQ9/UNV7r/UJzy54k1KWk
6pCUdXb59szRpllt0lnnLH8qUKVMrf8u/upwg77lqtbZtgh2jGeHCWLhTz325f5vENMfudvK2GG5EzpdKXLp45ahbBMuWrvRPm5e0/sLnNaMSwo1fCoQOzx0j4jeP+gPMpy6WKNNJc/jhIXHsb7q/dhzvhOJ
hlWcbcm6MnMyQ4V6tC8RpC1NXAAgDK2HcqnihR4vzcK3bR/sPR0rYUa46F4OqTPKQaFPKEmDXZP5rOt+1Pq7jQ0WEA4ehitf8X9o/Zb2fK4ioDUHdANGWXBp2iYkmL+hvXYmqgY8p8UwHB9Vfo860WT5CZI9
xgvuA70hNyBxeb5jtWJys8PssfnEcgmFqzlg+tuhB94UbGMK69DFYIZ/zfiNirlT9iAvwh7i6a/GPXNffdsMFgaP2QwbD4N38QDZOK6U/IUoHyOKJDyKheeHWjjNjwflC2wablJvAG6NviVJHaUERRZCYH/x
wL53Ko3Ug+8uD8x9QOCUWe9UE/5DSk7RSUo58uDbEAw98szS6uZfytIYTi6h8thPQhZQQV5ykCVUE1ezsaxGqMTKvDK6kRxMQ3N/zQDfsjYz8C/yNZHpvmOB+N283pmHnFSD/ML/hIU3EwvL2TXjX/MTWp8J
/yv87M7SQRXQN90g6DLMRqp+mVws2bf4UqY5Qd7u7b+Imn5D8Y1om5rUSNoGmEOwkM2ZHuEFzrkldA0LHgedon+GXh2iTKK8A3WWZ+mZRMU21xLqGhw4tPfjF2aU8yYYNtGv66/rVJ87JNOJU2/uJQ3mtJsU
8p/fwbsqXoI3HjKsgN0hT7qUaaFhr7REsAixheLqmiik04cWeBnuvJQpn8wX/aRvMsBPLcoHd6tqKyS7zj0YsJDIGsbVfyL5OCbpv76s+p3NHV/nPDJKzMILmwIvlj42qN1+SU9paA5BOffJhrfwCp7sMj+r
P2/jEOvHnrnLZlSDPMTWeTbKDmeU493ACQNVQWFwA+iS/Rl+5662bJ52l77i3OPNvJC4OqDpGKk4LPwe3/uc3wDmFLYrtO9JVEEsPOefm6ZkZeYCSZy5DGQqvrwjjB2stIBrEhMdbkWlZXT6efs+1C5LOBG/
snZnUO5IuHMRUb+NAuAmDw5plMfVARLpzYzLehN3JN3q5rx+WyZQfwsEPcup28eyaxO6oz0Vj4s5upaz42rcaKdefWgxHt8wPtvOPxueGH3ula6S+ZCqQ7XI0OlzX3bjwbMXhoETKhxr37OJKNtdK3t0OEra
AcyxibzAr74MTP4o2MzqWlhtfkVSEENPp29UIkYANPx8nQvBd8+Tkys9iC4CZHn76tAoJ/KyQVpW9CaVFrNkTvwIb5p+buto+dzDvhICdCk+4oHOeKFDyiPOVo5wIhCo0zWrisEfhm3JWL37KKmaCcWD/OfV
2rc10rIhKhjfk0INowdOsrGarGdQcEV8xbRvJYsPc+QUeUaXr7cmtQO9Y3EEpvrAFilhJu2eGWVH7KeaUbP60BYXTXI2Y7upOut78oiR2d5ehEZAH7tRdYrfAByXfjJLbOATPps7aT5WIqosf88ANXesxPln
TYiu/ujgM/fYpOKRHOmlC0OXMAE4ZHBQlIYKPTTcdclOmYgy6zs31ex4lix6zmfeO4WPTdDIByE7M0j50H4TTqdObq/aW6ckBvyKpaWG885Xibu028iBAZ5jpaAQBa8GRg9ujiKcSqmlemRBOvjGu+TwXUl4
7jpNicgyl2bVS6vN2SRLC/yXvd2uF/ZSYeFeGyz+wXtS1FDscE2H2HzwtA1RhJeo7hAiTKqlLwh61kuems9/OOmTquNEJbV47PM/Oardt2OUHsTeUK5Ga3L96QW6nsKZTzoV0j2beOFjAK65NBTbSjk8f/1V
jF8PVB7Mb7esqXd1pGSWyaK2OUsYmZXSyHzqwr6aFCV0shy6bD9U10voJpoWuJR4S+lKlVn9NzsTCuCgrVyPG9DS94LYulyaEZq9VFez9T2faXjTvCb0bOqXdxabrop1HaWUukWUWsi2CgXwHvlVtHAKKsz3
gsyCGLaFl1NyQe4fI4RokTTV/ZF51/cqKZBS/VZCZg/mRyacCN9I37h8tz5KzDMIXiUSPEOqfyOwvukY9kOQukfQBaeXoXdK5wxoyFuTj2dzvqPQihyYOTEjqsFnu6huFqdKc1e7G6d80H90cykUJxiVWI4o
LW/JukXyiBJDWXaiD/s2RoGCJat5qpk6PqIdhleyxmmsjZklKh2kio7A+Uos7BrpSWbSiATSgNCehiKWcDHO5RBhM/jt0gsg2zkFeWqdriBuEK/848GGRTrsg+GMe3+YrlWDHehHcXqPqP+wRAH0opvOmSrv
l8vrQ2T5FuelFNNQH4rkUz0h5K0RdWQsgsFpLaMMuywzoEFmsMR/cK/0UPNJ8QMTZ5H6vpROKpjJ3NBcRRw91td74rIHX+CftDheTyvWQckxA0zkj8dbVNvCHEgfNvBku1AggfIW6BM17MXeAHrd77Tzl0Ve
BfTdapu3ME2sQMQCnHQeJa55VHaWhCxvHadq49cwCFFMMfK0TEGuuv/ZQOW1fkcThkQdY1eId8H7qiGj+FWCb02xL+oKQXuhUcnNMxrN26oStrPfD8sy7GenXXKifbQ8xxg47bpt1dzPE44ozxQRBIIU598f
0EFznfoOLpsJ785iHF/g1CbcMi8WbgP5ocMr4WEJmdXK/jmCbDHFORQ2qzhFxJpLGiryZaRUM6iY3FMpg4CdK6yfXAnEWE7JqB7qjAxnM7YCMTbg6acqlKe5cQirHMgCmgroeGVIsQp3Z1PqEPGfC0cJPH+x
S8BjarC6nq+HmgJuOgk5uKBtGTP2esIgLTQILgyqzoCSdOWoO63dSBacLXk+e+Zy4E+ZaH4F9X5WyCrp/dGizxtU9pX4kKslyJ52d1OgNm2Qzd/D/dUi9Uvr1Lk/trfS7SOiwKMiyVfcj9pFyBKuGotbquR+
36XWCVUy/oQRV5YcwnhfCloxuy9TGEaGfXQoYH8OQoy4WtASFM/Cwa/nvBvic63Dlbkg3Gi04TQFA8xzwMxoVpXqvEsvh3mD8CzzYOqhQumK8qep4whKKdG3oaNXUrBgKOFLLfhcoXcOjXQUpbKWszg2DPPA
cNzhY2+gWNPTfsUW6KVegB+p0mesgWueMQ8UYG6479uo7x98Jb71uP13GtXPVlU3IeW051Xf7j5itkddX69eVSgxb3d0kALBLRFDGDWiU2EOJPPXCdHAfpSse7jLw7cFUuCcqWz28wyglwXtpUIOChyC4vvy
7PV25SZwDtR9yL9Y/IBDLdECUQyb+/rXYsxSKTw3NYpMHXtQJcuK6L3AMwoA23km6j0E6i0SEThCSRxrlfRXSu67Hi418QJP7/3PNHBc2jPXaRPPIXa9xeEzD1NInv4LioNegFWgN3OGZNG/7BkP7AqlipD7
49UfOexHmyWVxb3+lZvi0oVJQqPW/a7RkBcwCnDShVjb5P/wSQCYdtUBbl5el/Jx0WHxn3IBMgqbyADHGnXaC+m0mQbXmqTWkv5LV/lCILRKXUNfUc8LejXO1KwUyEN+9hqtuf/JILFpo/LxhhL0VJNz+0aD
T+1fkyiMZwB6+qrVehXQW7lhCs1+Q9uopBsAjG+ZK2Yb3Fll5dL0NkNR8/88Sq7uySc+EXqLAAUR7IZ1nyzDHmsx2qvGn5VlfDMr3g92bFqovJsmUTTiekT4D568MIh9Fi4ntmQey2jlkR/l26ddgSbJHKw+
b71Rmyrqdc5/Qo0zkWluWr630FsTgwMJPb9n9sVneBVj/XKCQLzUM/ZjRTlTRaAM5HhAjsjcMSQWNcH0eargxbsREUflV2nt7XzHu7W7M35F/+XaSrd6G0kPwToD1AXAXEjk+aAPNzLmQjpJSb/WKOnhyZZy
jq4bYt+vVbRBe3YuztB4xOvnSdmoPopnHgn61vGwO62sthjpdl/rhUhWbCiFB4HdAeW3Sz5vyjkliiInw330VCla8XEdsBa7YcbEd5vYGD/KfVeMM5aeEq7s9nVA6hSQiHQSyIwIusfum6c9Yk/7ELAPtQ+d
zeWMLE731TgtBK9C6xEtBeBFGjlVCyeYwiKK2LqubFSJ9dvubYJz7TtAHwGcFBk2iVBg/9UhLUMVj3hFsWMQZu+T9jPiaJKdpUygEhmSrDS9gSKLDBuF/l2L17mJpQLhqk4HL37Zl2C0ojZctOr525skBRFk
lGDmYEGFUv4OMIErawxagSDslULnswlM/398pEI8C55Ssg71b0STtNB7L9wWCHuz9nQcWMPHN6hNwxDGOhtXoXC6t+vgZ5vkHSABQHw484et1A8eYsxg/xe6SRAtNEQcdtrg+z/hWvleXNQwI25Nm6aoAvnD
tiRNoUu+XnMl6IkkfU2+kkK3+Fuo/2zbOT4cemb/WhQIcyJ7GmcV1UgOoQIJCGjHtbvZdNrNEuQ/gmH8RipvDV2uFdg0tw/+dCGcalsAIc6rVM+nFcbMjVbeqd5E7ijRdKBMg9jaR4FmJ7FaLc/rbzROAYiD
vlHJVHrZGPu35Axba6qmHNkfaoKtbVJFPnQOtqixZn3imrmPN/RP8PKiCK5aTaPs3E8RNo2jj+Qtj33n1UTKP8KrvGN4yKx7OWAKPFTw3pVGcs5feV/JmX9l0OXII3Dcbgd1OncD7TPNo+zkMk9zyAnJ6SLZ
IfZSHgUiT6E2L/Jkm+n4bUP0b1k+9n2WW+Y5Af5NysxbPtv7h4vG5ShgB7nxWB+/kg5bDrXkl8KPrBFk6iRCi1zYH7BQ5ld62numHTCDdPFR/e1jc0rKXgQyu2uhTuUpK+B9iHJpfrctHH///sS5iBMF/Ouo
aO8M55xS32s3Wgr19e0FCT0ALu3poN86OgxuQTPrG+YXpRzKw/qogOZEk3js41DhOosva1knjBEm7JZ+N1YksgLaj6kovJeiGfXLi71PzHFxhfKUJfNHZlZBQZrLZgwbTROY3Tkr8NCKvetlkEaAKJqCqtI6
xhSF+aFeF42PUxt8CNyzdQdhcpnsA9d/Xl8aeI+Hh//tgH+hENk8y6jEL88re0cjT+JF82f0hFpNpOpzaKsWvQhiXH5eCY+nzGlLxwFWTv18zVgZ+GBrH5Uee1FGbtkWwC90uv7NaFQvG2MAAuKE6N/E8iam
ZZE3LbPhBNkh5DhrHRGzMSCA10dxhvHF02f3sURuMG/6hgzjIVwgdR36b+Ovb+hDnYa+HLqL04hzvmVp9/31TmnVh2kaZZ5B7H2kcWnFEvLZRhAhRMtSGDiAh6Q1dBA3gimGCDwQDjpsfZu7ZwXfbklELxFg
EJ1ZS00auFNNAQJ02IqNfyl9cndPfHGp7TdHSHAaeXqH6hi5SHBL6vmHXmfeQ5QJ3dvRy/2J/8oIobsDdJzjFlz8G/bH4FvJQjXz0Iy+5FGtHWfZd01yeSKSKcQvv5Zc8Djszi+8PYDRfviCdFy2CoIBQ186
g7CCov9zNW9FKm1rO49/FCUTN5K4w+BcaMJjEmUjuGn4uCJ4Egwee6l803vUAnuMuu3Fh1yp1/aqlyoTiAZ03QGAgqW4jrQ397tUOOlJhUKQ/yS4luCK53QW2KQNpx7LQhtnfbkRzvBoi+rWt68Pkzztw9dy
Ztt614zHgjKIR2sSPDJ6yDzwIPihcAbH196GXWQVim20YnEHIeifxwMdemrJvqm13ExHkpB+xMS5O1/SntAVwCEhtsfXHNVIMMTCuvE4kfgZaiEVzToVmU2SIKQ53uYZccEQ6gyeR3nZKssOZpj6HkiBctBQ
oc3uWOfWV4bnr03OVZJCp1yVe8LQ8l5uvpkxcbkifl61zwQtxzV6LKiwYzqS/d6tNoRMMX75xx7+QzaVi/oWAPAEUY6iNNx3+OfH+bdi5n+3EKwNYgvLInRflI7gI9MF+1UI2DspaWeX7wgXiCkisMr++plm
AHEbW+ur1wm3UhuZwYdNj3A9uPkNlU94fiY51zNnPntqoS1iGzHppjrKkK1u3Zenp04w0Xg9Nolr6lnrCQZzSe8dd4iRYq2tzA2hz8CN3VmyL59U3Sz+5exZWaH/uvPhCgXB7acez+aE7ZR4Uej9VlspQ47C
UzWtQ7E1Nia/lAszCwaTzcSbTObuGud5rg8c5GX7cu23LSbl/7nl1hRqWK1cjqo71iLQIbm63W4ybyl+4bPAerPY2eUoVlyaLQ0GAGykycf4BAWPkWbpTUQMGI5S7eK2xHZ5l/OfLTIkqTZJnMyjRrPvuCRo
qj2Xt17AHhA1vjVeC5qw7b4mga3E0X3R7xlC18OP9sY8HfroFu5vA2tiGsUFr1wxu0eYBixNG2zv+zrmkf4Kb3OeESHkPyWD/y8sMVag9Sv2XG2gkYphOXkomwcKNVHvKSFHePlk2CMR3XVxGwtffOCTm1Mb
B+M9mmMpQs+OQ1pK1CJQ+JeNU/gJNANH8QUml0cvttNqYOPANornVTmxa8WAlHGsSTN2VSECuIlmpn1rkpZ6V9BQy+I6GidhHXKs6/0M4NDEEDVmKPTJ/GcT6LLYVTOhcQ0N5FpfkiWCSx+O1fZORpV8mZfo
2ozD8zs/qWmJ9axtwCSBg8AjxbbD89sDxMIjJnGLye3gbroEKPlPL2EVBWQBsYD9BONL8ay3lRoZGGd1Fxl65kKstiBqPieAQEFg1N5acKmFFbu9mC7gly+lJIF7OYbVtOrtnunU6c1/HFfELg8lyI2m8HWe
b318UKZs/uAww/QcbTiUBbqVjVKfuWl2cQ5jf2x9/91W2tkzJxUPGpXh2ovoKKHlniw6foPogki/mVa2Xdt+sa+z13Bzw26nySxjR7yJDn930Cr0+0P7o8yUOp+AEVz/XgU/fB2NnywAWhzySQAxGeyRhh72
RC7RVk/QV+PJXJI2yBMeNyzl5bvBn+XEM+O7HxHwrxTMVMAJyg1RDMHyF495JjP6dXXY+WsCTIUZN9OwNs55UEP7FqBMnUz75QXPVbQ5Lfzk5LR7a4Qz0QREXsI31apNiBXwYBxtVN6O5QiS+rHrqcEFha8Q
FJY+gT/EjRYpYacth4jUaxIC0VVR6uHaL5QC9wL+jW61x0wQaHBEMYG4tEiJbAyTzm00XLIkW9S+U390QcKe3Y/QnCE1f9GHILOQdej/MsSUCJTXkCvWjgMKHUMnr6HX2Hajh8nhTgYLxo8svMFm/i0KyLLB
RGJ4uRfMC1L92po6gwJrx95bAksYRfRHzugh3p2EZWQ/hFKExbGAEoqhHgPfK3UAZGKwueg/xqzfDem4v+XWVkRsCu3zCblGiyjASvYudHaZMt7nOYP6sUYCli2K99tz3MYqabPdmGQ4fXECqNI6FalIp6Th
0axygrDVdAisD7RhBKg6lZoV78608WMOMZI+y7qJx14Fd9K5Exk5noiTSPnvZLfonuyn2cHUpGPUjKjoWH4DZsJtA0idH/BESFlNKe7fM7ZxCX1wvquJKyDyj59p7tVq71SIEwCmK51bgfRnwYVXL5OKT2ej
LZHWKAWP4M1MmK2wpmnKfvccIhJD82bFjmSZ38wJwVkREm7IFChdOw2fx078tw4Fnrw6u6eq4sDeOENHuLmQDou2om0ibfj5mue4DfW8j3Z7txGuvGuW0i3FUVDV9PtGT1FLFhPRpRqyw7Ps3IOoNq651uEJ
Dzq3ghsgYFqDfxqw1Oi32rY5vBUrBQzCXxNTVO/5UEdKXsY0OkegMzLy4BPYK8vmou/0IuuTQNJSjpoqPoDsoESDYqsdsAX16px1i2oN0PcHm+deGz1/gNwx9mYdl8FtWq/Hl2jPG2KEHked6fkFvIQn2tRp
nr/ay4H+JDc0a7T/b5IPvU79JR4AQUSZQ+8nuLgcLYkesg8EWm5dQ1vjNzwTUu2K5QZJnvVtCLq/PChy8o2SMOaM4RgOxem9e/MiAqun5wBiWttcbWf4SOdpe2iL2RS7BvVh3aWPbRtc67SRz3E0UkgAPklk
4gTJt8CzePPJA7/gfNOQp8tbcw7rsdWiVS2rGZd/Sh3PJIKxbJqqSRneyI2vo3PI4Q2o2GIzs2jUzP/QYfnZJ4/mqKAEXxcOUCki0t1XTZCeTAPpmdvsKgsETp3ozzsbXwaak9qPAtv49EgaempNCOJbmCp+
kFoub42iEvOlspB0ImmVQc15HnKpz1F+taIowduSXLHmQxbxEu9ifhyWqykqXTrs53FEfHBltYo8j1hL0Ia0Z34Wgyu/fcLAYVs9HJ/1JyHqbwv+IUASoEE3cJWO14AiweGq3tGKAD+7cWTqd9lWmRGVfJM0
dtGQGsBgZ2ABDGeNCfQhCPmL5B3hUpKPGV4xf9kmBuFhIskywytX20bgJxb8xYucfZE3rvVI6h+LqQqGw5qkRarIPP43SdLOqm9D8R6+x1AS571tzv6OrzKwOR8Y7n57BGbeeLj3b4oZ3m6a+piquxQ2Ac5f
17jCc4e7tI3RxfUjwaJR3JZa7Dcbv4GNiXmPvNPlJ4PUmkqfVVTzGXnRdmqptOU/LDSoiZkEjyUUV/Xz67Cnv4FwBuOQ2U/cRMZO8mQHUimLs4vTWqnllVs/s6Gc8E5rU/7ezzXDTxjWYZEPvFjEAuQRUuC0
JOKb3gtZv7uG3eLDIZUkbLMNaDd12VZofXRIIL00oqbBhhnZAqmpYYwq1h4bpgBnnRy4mgY86kJhlp+Wxz2C0aSgVafVxLFTqf/bb5kBBwJ3R4lzCSdRfwhtIFSsHxT8NCWjDTry/dAqEeYkshSdmCdc9XiC
zwFt6ydDXoy3vYOQGoBHCCsrAY9wGeGc7PN0Wqv/sCSUX0Vfho8mh3IzTzZaaoGIjoR+tSqbRjVziqOfn/DOEf0wYMdUsdQmnphJnSNCTuo5/msTubljrZ2LNy22YQMtXqc5zJiwJV5aCcYVi6l+eRhoUpA7
IvwsproblgWIdWrllCzRGgWUadI/o6LRYKKngoqHVSa3a5JPIjiR7+g+0SK1l17sBaQYAs10CmEnhpjh+QADvLfUl7HxL/mOkX6+rO5lXq9aO5mAHo8TTLZJ5SMjP/vho99gzkeBXhuVus6OHxDKBd//gt1J
qHaOPxleSZD4rw50aFEdFiQTRqddRBczZgd44T2OJHS/Oawo8P8xF0jphF6I2CSL6WuYAuKG6RaTXrfXgu5orlHOB4BQm/VGHV2tkxWiq5MfAagDrNySPJdQn5yO6MDUewNTJnq5xwENhiYPH5YsGvnbX3qS
X409sgIwu3fx3V+sYsdP0fIrmvHN4BioEuWbEi5kG7S2w+OjE7QI1HX+7EqQ69KuJl0STtKh0no7PruwQARWhcW2sNCJyO5p2MAmw69pZw+dLOieq7pLoMgq8tJoYLUyEOPdYy0qs3Tms5XrWL+0Lp5rVXQu
p1el9AI/VERlMLqaBJJhHf1qBxFkcjcyi66eAi5jzbruanKp67Gfoxf9Pnzk7RxTJxfO9Bb9cLy2hBzCtRdHolUQgcOAPPXJ4K4qCgfxjEgaxOPjKcqJdtwFiErwkPLXmoKcumOkl8GgVvf13tbPAbLfrGbf
ySnFs/zMqe+WG/yyagYY3vxyJiT/TRixPS4F+630KGDWR9chreFn91CWUt+gD+Hp9LdZqE1t0IkPgKVm1ROII8Rzqz7xxB51Rz7FYsiGElK+yjaqFknhxIr7h3/NLaUYC1LXjYXaC0dyCAgbvPFP3RvkqOfA
xXz03zLRJ0O00gPxPx8M0pQtnIpq/xTCyPHZdK4UozqcdDbUkNPAV7Hag6vlKCE35IBIbYBkJUlA6Mtls3j3upkO4ia7ZOObKEAJxN6BY7sP0mIR1GkFUS+7B+2oJdS0eG5SqBDLX28I0jirkKj26OGsiEok
dyD+a3bL2DcSwJyPn0ppIsvVmISvaOSH+aDbML2A2FaBaHNy82ATlcfdp/l/PBIC+l9+h/r9DiBDmdkMLeeJ1++nBSVm+YnqP/V05vTAuLPqEFWdxvF2jKjy6zZ/iOhWAIXfZ8tMwAWCNsr/PRJFxLwnekrs
i1Hby6izth1g7hyGGk3bH/lY6vjFDLc3XFeLhp6O8812FFm5HedwIS/OcQNX+mv7Ehc1G+2KruSPFUjzETmO93O8lF6z1kDT3Tu1KzLkN9qxfXY9rPDFFX6KPjuB6H9mron1bbU8Ox2A132trLE6N7XsPu+o
Dv0UFWuYhdUsA29NyKkEWSnqalzQTf6uTQI7boyXhk2V74ZW9Zadl5JCtARirOIt7JN5ChGeGTYKCOaGQmih5jab+TYfmDSYdpRfv+hMrqhPCTqlZxFFirtIEOHDQlffJH25X5j/ZqzoaMSbJzxNzU/PSuBz
8sZ6oTMPAosURiGa14YrYe3qc6kPB3y87EPezlRf4bZM8pX1+6U3LD6X4py5NPMQnu0w26HB5M9zSozwmy6qNm0cGW5cB3x5CqY/BTXR1CsvKzo7RuBMOT70o5fkBiGvrRLXMfDZqWwrbcqmlv9fpldasAMh
OWEYVXxo8C61TpobU47MvAT+7v/rcE5hN16UuVhBz/9YTaVi/kGVXktLwWcx2im0u+0LkVLlVRqdHBP/27JVs/kL8VZ8Fv2tODEUURsGPuUpN3gbXypXFd1+ZCIlTWHp6sKlyQjQYmRGFjFyHp29KwGV9UjA
eQpmLjseu373IXHU+lsmUFbmX9iWmxBBd1Aoyba9RvhvV3SQlHdipz598CaduoGNUArw8ogrdcNH/SL6QFA6YqfoDR6CJXrWRL6WC240MR6JdEimvGdBgihvWW0hUlxvt2vwYK+uW36OTM9qkPloNkYiDh6M
YwQHWe2GVcbwX6OFa4aCCJR2XVMSmMIsH/fupie5wb70NkzS5jDwH9O4aHtaTB2phAh0eZ3QDVfcgihtzm2LjsMifHLxaDhV3yT/m7/m72P00S6FrS+2hEzNWKv07Ym2MdcagBs2sfMIRvAgREdzQPaj7sIQ
BqdYbHIDEL2dT2aSHd/7tTwEYybgi1Cq1kvGXNeDsIN2Z4KK5JoYMvL+sxeDM4Q9uKo3IIzlGXqeI2Np33JG438f/Kxs34edpSJ/ZNUY3sHmJjl4tcRPtu2okBye4pYkIfSMSGEyNf/NbZQOqYzWw9G7yI/i
FGqybPeHxNzHV1iCf+XXTQkNfyZ90e0VCVAk0u2hzxJ9pWidnRLHxANZpYwfyPHpSMWhTQVnXgPSebgF03yvdsSbR9TUqUFFtJDafxcL/GyeaEqeQXmYMuJL/FDPcIMiHeJg3XLdRlqYqRVDsyHlWauXWqKz
c1QhvSOMMHjABqy07ubtVTBBdBM0nlb89BO/AC+FPyFqtwl7PHW19BZHqa59froRvohWsNj19JXlsDK576DSwwr+V9eq+myPCNClEg5zSed73wdlBvtNpNW9oGMNT6UuJ8bZpyH+oZwIxUKtuBew1dJ1Ofzb
VnkrhjJ94KHt1ugK8GtzYuDMMCuLL/7WSz5Yqnrwi9L5H9rj6oPfOj0XxYfS8k/a6WA5UAtu6TAwCYKToGDbhAmvrzw2cI2P7cyRhi9KZtH9zVyKMbstSt/A6Jn+oq4AVrhrwDkLRUxE3lQEpF/SCtEZmW5Z
VHLT6HsraS2O4KlQjSRaOprR4wv33kpoFWa4A5H4e0+c0uf9v2zGqIqFLfGcObLRGnu+o09ASsKK5VqyeqoYuCm6zGPDT0o4f/Yf18aUsFWXRL8E4398KsDkMO6iDEkAHxE7YJLH0kQcjPhLHv3NMQNaAA4a
paUinFMlb0mPCGfsGWB6eCucJvwb5T8PnsRGmbwhOy5kTwcvZg/WwxXLrlBfPfDtiB3wKWCbEhpdJISvPTOIzg57S4fCUdBCms8aRMbZvOXZitfS8nb3vnor/BKvj3FrM1Kh1bfBv5vtsDN2eJ/44cKFNchu
bUTOwj9WfjhHzwzV75CVPAPN0HFaXrNb0AZohOs+IBWWM0/3ZRbAQxtPZI6qE3U7Krfb4Cs+ItASnWfshB/9WFSzIZ0XHgizSl22P986LAFjN0Lp0fKNDbziZL/KLWSViaT4qmtPSnnPnEvt1f0Hri1KkMfC
LX4T0St3ejFrnGRwSBCoL0piOTy2AtAvmV/EFwI92y4IheqMQwLrAZgd/xEEBoUj4BP4FHcYTwZshEp4nymgH2Z7dvQ+BshVr7BKb0BpXI1J1kZ2c8/HCOA3B7eHiDI/LA1TRCHB0V7p3wnZTpLnI0fph9q4
jtLmRIrxp9h/3X428NCpgkKxEvmo7ePmY1mvsBYkZLn/6vWNVU5ZNA6732VelNLQMq3VpcoOO7aE0a6yJJsIeRkmMVsHaFCoTa3sednxYfja67jd8PgXJp/pkEiL9xR5UYvwMAuYrSjCR3I/iaRD2h+JlWDt
CbuQQvDOWZdGZe3NqbFx9KAKoNe5mdleLhd6TI7/y3E+pVpyLFSlQ3o7iVcGrn+AJe9nLR/FqmbI9YeYP2S1sVazOzDIo1WlpSr6SNh9kXtlW/OfLppDbeT2FRhD92p5mJu9pKfvuX6uli5fWL6thwczhIHL
LQl4K6R7higZM4KdbmmMYVk6OYV6p0CfXqHc5VOxPd4QJv3FEGdsOs5tmRK3lspqbbPvzF5gmMNuQ6RTpGXRuXGWEfxmuHpUtMS/4m4zVohb4VBb1KPnGSAjowXWXHnY+w92R1IJ2V6phPLjc54ZcdtANZSG
pL7RFgXpa58aqkiPzm8PQiq2C/fzXKQiZ9qsphb0DD+RJUV1mSWAALkraRnaKiM48vcn2KedM7RNRDPC1OcYlo7pBMe/zkxCkBBszYjsAXfN2MBK2/GnxpubG7vwDZLcm2+fzDWMdGcKyu1FcF4b8lqikc5e
kBZQNIH60ZNFQf0HvtKirsBJevZ5aiqeNK8nKjAQGU4kUidjqvV8cMLetszIOW0xEb3gDufd/btnbMoicAdopiO6KAFi0MLAUOUqlxN8le3+ejTap07YRwXFLYH3BiCaN/brGRA0tgct5MMWpEDXUrusdij8
l7qEMS2k8MIynsq58omYdx+ESFR5Tty6cnrK7Ysssa80xCD686eGNvG4C/YkwT1cFtoEHNLKqFaWl+e8HIIMxVDTC4TeYWVftK8PYSa8KFwuHB24mhitnnmXY9UIkht9gbsoPzyuBkHLwD7ITT0jeglXrQWt
Av1KID2O9wG1yPlhZImlawI5kB9JgbsKqG4laoJ39/erzijrahcyQj2a8eJtfdpOEYNAPh23e8GprJ9jSrgwJYjo/japewdBkDDw9KMS8/76ZAdjVkdEZBr3l4mhNN+ljO/csvSpax+gOiERqEf5/cFbOOwI
hhEINr1VkCbknan3MnLNZzVfOY8Ft3V6opiJRVTXo1VffUzVmGWlG0eWiMbc9sBHghkFzgKLaDYIrMVpMs5CezMZc9XsPbQ2lUMJf5/lN1XCpRj4+FDfah9KCGniPBVoZ2ApQibsh59C7vqAHb0l8Ln6iU37
G0JsRubyMm0w8+hN2vWF02OY+kmBboaA52BLT8sYTPWb0VTzHI0ez3mUsoARtDpdSbuEmvBs8U81XF/uP2uowmymkyKtjjBb8E9eBGopKC8x9Dlz/+v9jygHa8Ztyw+JNmS+gxprNkqLm8SPsEJx8IvCsdgU
Id0dSrL5lV8vson3Eb/z0Y/PeCTJr5rrOG2pwf9HUnAtFYyxU79yj+c3mUE5fJ+ZjS01zRgkWNymw20sh2oeG9G/9KntZFM0n7zdQZypbIAGBM8oW0qXRABMJkcSIshkZ+jtP4tLmYf++H2qvccglEMMyR4s
zGsA9Qm25v4cI3wghtiAOQwpKM09LiPVQH4aSlVGk4GL/BEs0u7trfgVK6QMVH5e3PUik6yuk9Y+f1jNypRCnwbYu3mGiNproUui/+jmUnnWZPXs0i3ODJrzwaia2jw0Nz1RV8SlueHNwmYsGvUEtXpD7tvT
oyc8sjfpB4DVZSBGgYVhzaKrbJJvKnq7KQpZmO1bEuuy5/YjWZyWD2rGqhk2h2F3hoyNtfm3Sl0kRT/KDLjWGg5M9n3BtlYy3AFVZdJ4Ofuh5sZSZJZXHDRUbwSeP5GEanc9BPm5k0ByAcKrKJVDiHEnDaph
jm5i4O2SD3a1Jp6FgNfNcS7HXg2/pSbVsldvSQiqdvsgwg/TU81OwF8WfiADlgJLPYtBPWQvdSf5eMStVT6vu9g5Hem4r1Lj4S2pIeRfP2wUVNTA/0mT5/ef6HJ0fO7U9MYWHjVBbErpRD6lIdUNsBKwJCCr
RXsE3EYRV9tJOX2eweSF6S48FSDypfSjBHwJSbllqUd3eKN8zps1b5+ITG79NcJC/1IpwivNjq+o2Li5KE6RWwH8c1ccwV5EpnGlakkPSOmAiPp9aVcrsVcEtTrYh7giRBrQdy4hUv1I3iVCVmZOv/n0IV8q
YDe8WDbOmwGN2qaBAQMdwhY8Pc8sp+h1rp0I2/9PRX445IdifJ6cFsLcShop1XQqH3vnOL3/Nts77zcs5go1YFxMVSTN89jTGr2+cad1NUmUmME8j0moGpTZJFTfcp/lmZXYyBuEdTncbO8YzXmb5yz1sR+d
neLnmHyyUH01Zr9StuM4XRNEyQWdiy7AygKVF0WTd73sAC7JafBjFEMgzEXP9Z5gaG1VBYvCcYejXdFPmwICpNmwa0wl0hZRooMKrqUyjpO9jkFytI7bCNUH61tpsQ+lpRa/plpkRFc7ddOpnik+jtZe7Cb3
L9LYbn3YwHvODbX8Uwrqe/uSTEfmINNiuiRhd1SGKApphflMIDlDG3s2eUKlKGT//QDO7U0RWlkgJ7NzUwlYN2H/X0rXmurGoYyLAK+UdMzgmVtOFqQED/uRk42YjiXtsGAfGiiTThqQ1VBpUMrvGPm+M9th
7+gxDN4P9mNt4/FN+qGy0rIbeP8g35229j0pKBPdN+K28qCwbrILuXVZGTxccWuL5oq5KXti0Q8JYTFeo6YX/zCCDgMBSjsbr60Zc1PMRjYZC9ncoSORq9V463goTsp4m13lz2WipGOcmxi87U/UNefVgQAg
l/fitukWlAa6nhqauO6bO8c3eLwrT0IxZfMvWFPVgDuoO+SJrWlLr+bHOdfB8w4Z/Yv5lOyHiueYrk+iwiv/mw5ug8CpwK6BJzBEfNMtJ/uPhxaUmEq3+AEOPrrJahQ7surETW7YVfXLbzDKwnCXlYZUYHTn
zmSbbejFyUUwfku0GSIBSthTK8m0psmKRaUTnyBmjdQoxeBaVJvQIgmIZZiPt2DTBhTqmeZz3NLTVzm4emY30+iS7IqmvSkagXUaPaFwpeJns/wODBkoJoqcup4lZUcmX/fY1DzLsqxOn6ZZzRxxi3hABnEd
PXA0cyCJrLz3KN9c40IAiuh4jYagICt8KURWuuTBm20to+jJYgHzP+4D9dkJz6+eF2v8Ngki4idJIO1oPmFVfO1U9R4UsxyG0qHyi0B1azJQAmEnAeeTtniwrnvHgooqYcFtkbmp+GUNYKFo1mn+qyqvwgui
VJYUHKsFFdKQKMd1ZiJhQj6lLshSCjsZSmQEAVEiSWpwiKIcjJOxZ8jbHii75QHc9rH5OPmKFx0Y1R6goC4mqjZ5S0B+JfPoq2+zoSX+ZVCk+/x/mdJC3Ru1DiXc+J/CDAH8YmtgshPxMeXI7FbKusoMvaA9
2cMJUHfkiG/kaAAAAD1BNEMEPoWhAAHaggOloBa7MQMsscRn+wIAAAAABFla'
current_internal_compressedScript_headerFunctions='
/Td6WFoAAATm1rRGAgAhARwAAAAQz1jM4CsHA1pdAC+ciKYksL89qRi90TdMvSwSEM6J8ipM2rR/Iqc/oYbShD5P+hKgz3ONSu7BhrUf8OSN4oZ8BL1e7m0JQ33pEQs007VTHA7nLczyIuWiilZSo+0zB132
DrV189uAlZ6oqD3MK7bjrSmuGreEaBOC+z5QkGUPIDVaXfJmDg73/A1Y9JqRKxtli7ZDurfX2t/Z3m6RV6ku3LwPHl2qt8/kbWEubRkY3Fl2VTTFWjQ8Z9qfpBK4YyV7fw3X3hcUmN6Fz+u2P8eCSl/fCnNX
HtvGeiwoJbZ3wje2iPvqVhHoy0BMVkEDcSqWo+znkV0BwqE45qLsZQ9IGG1CzglgciwcOU2fdsqKBFC5XA3WYFGg6uZ2q4mvn5jWR+FbeUz7YjupLAvLl7DE+daOBWzzyYeFrcMhDk1QeqOKpv41V0GTTqAm
Z7lRbPrhk3oRY/kBiQGZSfRuxTSmIc1zevrFy6JWcZkCJayU/wQ+XEKdvF51XHH+OYrSuhIxvk6G+Ce0sbTr3GBfVRQYdRpxeOs48xNaEfmBf6GZcWUMx5L3LA4cup19vL4O75JjKbnlJeYdoRCjtcPE7A8S
82KbKVXWm5n1ADflKsnTX3CVTSu7uS4pVXHlludUnC/0dCPIaO2WxpZTXETnBW0SD0f3HTs7UDEzwk7eMHnoe3xk/cdsh16yyG0jPOBLHEqULsotf/cimpgvkZlFxPNFKvrB2sVBDpjr393u8l5sSqQ9L5Vr
QgGi6nBnxhDESgC1fQ6p4D6w2joYaBQzVX0ShFGEK+bvZ6VjUbYJlLF4gx2eezXDlEClVs6t/VpATWVe263gsdVgRirp4aPGEtCnMOl6oAU3laA3KDdlQbcC906c44adhj8dQ6w5GG1zEy5jv73Q/CBnpuh4
6Q2uqurIYFG/4bzAesrLfJaMbHC5QEx2yRFLlLaXzwYBqGzW1kQN1LZUOdFDF746w4C4eMXwHmuiAdpwV2muM75Gv4UeLCX8pXZlUOuUnruNLaDG9Tq1m+cWA1lXHyWJ4wB4kyv4KtgYXHsQL1t6bC8gD9ly
TvtNA8FiEDaU4PeofKVcYpu+2JSbjM6pr/bbQKOmEr2szDpnOSz/0dZivx9HodtgWaii7I0ZRCSi9eNbuNfa+H7BpKNBHwAAADfa2eLaotFaAAH2BohWAACvFwLPscRn+wIAAAAABFla'
! echo "$current_internal_compressedScript_headerFunctions" | base64 -d | xz -d > /dev/null && exit 1
if [[ -e /cygdrive ]] && uname -a | grep -i cygwin > /dev/null 2>&1
then
	export tmpMSW_compressed=$( cd "$LOCALAPPDATA" 2>/dev/null ; pwd )"/Temp"/uk4u_"$RANDOM""$RANDOM""$RANDOM".sh
	echo "$current_internal_compressedScript_headerFunctions" | base64 -d | xz -d > "$tmpMSW_compressed"
	source "$tmpMSW_compressed"
	rm -f "$tmpMSW_compressed"
else
	source <(echo "$current_internal_compressedScript_headerFunctions" | base64 -d | xz -d)
fi
export importScriptLocation=$(_getScriptAbsoluteLocation)
export importScriptFolder=$(_getScriptAbsoluteFolder)
! type readlink > /dev/null 2>&1 && exit 1;
! type dirname > /dev/null 2>&1 && exit 1;
! type basename > /dev/null 2>&1 && exit 1;
! readlink -f . > /dev/null 2>&1 && exit 1;
[[ "$1" == "--profile" ]] && ( [[ lean == "rotten"* ]] || [[ lean == "rotten" ]] ) && export ub_import="true" && export importScriptLocation="$profileScriptLocation" && export importScriptFolder="$profileScriptFolder"
[[ "$importScriptLocation" == "" ]] && exit 1
[[ "$importScriptFolder" == "" ]] && exit 1
! _getAbsolute_criticalDep && exit 1
! _compressed_criticalDep && exit 1
! echo "$current_internal_CompressedScript" | base64 -d | xz -d > /dev/null && exit 1
if [[ "$1" == "--embed" ]]
then
	if [[ -e /cygdrive ]] && uname -a | grep -i cygwin > /dev/null 2>&1
	then
		echo "$current_internal_CompressedScript" | base64 -d | xz -d > "$tmpMSW_compressed"
		source "$tmpMSW_compressed" "$@"
		internalFunctionExitStatus="$?"
		rm -f "$tmpMSW_compressed"
	else
		source <(echo "$current_internal_CompressedScript" | base64 -d | xz -d) "$@"
		internalFunctionExitStatus="$?"
	fi
	return "$internalFunctionExitStatus" > /dev/null 2>&1
	exit "$internalFunctionExitStatus"
elif [[ "$1" == "--profile" ]] || [[ "$1" == "--parent" ]]
then
	if [[ -e /cygdrive ]] && uname -a | grep -i cygwin > /dev/null 2>&1
	then
		echo "$current_internal_CompressedScript" | base64 -d | xz -d > "$tmpMSW_compressed"
		source "$tmpMSW_compressed" "$@"
		rm -f "$tmpMSW_compressed"
	else
		source <(echo "$current_internal_CompressedScript" | base64 -d | xz -d) "$@"
	fi
else
	if [[ -e /cygdrive ]] && uname -a | grep -i cygwin > /dev/null 2>&1
	then
		echo "$current_internal_CompressedScript" | base64 -d | xz -d > "$tmpMSW_compressed"
		source "$tmpMSW_compressed" --compressed "$@"
		rm -f "$tmpMSW_compressed"
	else
		source <(echo "$current_internal_CompressedScript" | base64 -d | xz -d) --compressed "$@"
	fi
	ub_import=
	ub_import_param=
	ub_import_script=
	ub_loginshell=
fi
if [[ "$ub_import" == "true" ]] && ! ( [[ "$ub_import_param" == "--bypass" ]] ) || [[ "$ub_import_param" == "--compressed" ]] || [[ "$ub_import_param" == "--parent" ]] || [[ "$ub_import_param" == "--profile" ]]
then
	if [[ "$ubiquitousBashID" != "" ]] || [[ -e "$HOME"/.ubcore ]] || ( [[ lean != "rotten"* ]] || [[ lean != "rotten" ]] )
	then
		return 0 > /dev/null 2>&1
		exit 0
	fi
fi
unset current_internal_CompressedScript ; unset current_internal_CompressedScript_cksum ; unset current_internal_CompressedScript_bytes
export ub_setScriptChecksum_disable=
unset ub_setScriptChecksum_disable
true
# https://github.com/mirage335/ubiquitous_bash
#_compressedScript_uk4uPhB663kVcygT0q_compressedScript_uk4uPhB663kVcygT0q_compressedScript_uk4uPhB663kVcygT0q_compressedScript






#####Entry
# ###




_set_nvidia() {
	# https://www.reddit.com/r/linux4noobs/comments/115d0o4/how_do_you_install_the_open_source_nvidia_drivers/
	#  'This can be achieved by installing the NVIDIA GPU driver from the .run file using the --no-kernel-modules option. E.g.,'

	# https://www.nvidia.com/en-us/drivers/unix/
	#  'Latest Production Branch Version'
	#  'Latest Legacy GPU version'
	# https://www.nvidia.com/download/driverResults.aspx/187162/en-us
	# https://www.nvidia.com/Download/driverResults.aspx/44241/en-us

	# Tested apparently successfully.
	#export currentVersion='535.98'

	#export currentVersion_series535p='535.104.05'
	#export currentVersion_legacy470='470.199.02'

	#export currentVersion_series535p='535.113.01'
	#export currentVersion_legacy470='470.199.02'
	
	
	# Tested apparently successfully.
	#export currentVersion_series535p="535.146.02"
	#export currentVersion_legacy470="470.223.02"
	
	
	#export currentVersion_series535p="550.54.14"
	#export currentVersion_legacy470="470.239.06"



	#export currentVersion_series535p="550.107.02"
	#export currentVersion_legacy470="470.256.02"


	#export currentVersion_series535p="550.135"
	export currentVersion_series535p="565.57.01"
	export currentVersion_legacy470="470.256.02"



	export currentVersion="$currentVersion_series535p"

	# https://www.nvidia.com/en-us/drivers/unix/legacy-gpu/
	# LibreOffice Calc RegEx Search/Replace   (.*)   $1
	# LibreOffice Calc Formula   =CONCATENATE(D8,B8,C8,E8)
	# LibreOffice Calc RegEx Search/Replace    '$   '
	#  IMPORTANT: Whitespace before quote in Search .
	# ERRATA - May be appropriate to ignore 'Subdevice PCI ID' . May not be relevant if the 'Device PCI ID' already matches .
	
[[ $(lspci -nn -d ':0FC6' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FC8' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FC9' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FCD' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FCE' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FD1' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FD2' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':0FD2' -s '1028:0595' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':0FD2' -s '1028:05B2' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FD3' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FD4' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FD5' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FD8' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FD9' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FDF' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FE0' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FE1' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FE2' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FE3' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':0FE3' -s '103C:2B16' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':0FE3' -s '17AA:3675' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FE4' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FE9' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FEA' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FEC' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FED' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FEE' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FF6' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FF8' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FF9' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FFA' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FFB' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FFC' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FFD' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FFE' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':0FFF' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1001' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1004' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1005' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1007' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1008' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':100A' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':100C' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1021' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1022' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1023' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1024' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1026' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1027' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1028' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1029' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':102A' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':102D' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':103A' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':103C' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1180' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1183' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1184' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1185' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1185' -s '10DE:106F' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1187' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1188' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1189' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1189' -s '10DE:1074' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':118A' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':118E' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':118F' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1193' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1194' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1195' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1198' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1199' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1199' -s '1458:D001' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':119A' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':119D' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':119E' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':119F' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11A0' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11A1' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11A2' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11A3' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11A7' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11B4' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11B6' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11B7' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11B8' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11BA' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11BC' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11BD' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11BE' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11C0' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11C2' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11C3' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11C4' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11C5' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11C6' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11C8' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11CB' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11E0' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11E1' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11E2' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11E3' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':11' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':110' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1100' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':11000' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':11000' -s '17AA:3683' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11FA' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':11FC' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1280' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1281' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1282' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1284' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1286' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1287' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1288' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1289' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':128B' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1290' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1290' -s '103C:2AFA' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1291' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1292' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1292' -s '17AA:3675' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1292' -s '17AA:367C' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1292' -s '17AA:3684' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1293' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1295' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1295' -s '103C:2B0D' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1295' -s '103C:2B0F' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1295' -s '103C:2B20' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1295' -s '103C:2B21' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1295' -s '17AA:367A' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1295' -s '17AA:367C' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1296' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1298' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':1299' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1299' -s '17AA:30BB' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1299' -s '17AA:30DA' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1299' -s '17AA:30DC' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1299' -s '17AA:30DD' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1299' -s '17AA:30DF' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1299' -s '17AA:3117' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1299' -s '17AA:361B' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1299' -s '17AA:362D' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1299' -s '17AA:362E' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1299' -s '17AA:3630' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1299' -s '17AA:3637' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1299' -s '17AA:369B' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1299' -s '17AA:36A7' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1299' -s '17AA:36AF' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1299' -s '17AA:36F0' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
#[[ $(lspci -nn -d ':1299' -s '1B0A:01C6' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':129A' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':12B9' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
[[ $(lspci -nn -d ':12BA' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"



	#[[ $(lspci -nn -d ':11fc' | wc -l) -ge "1" ]] && export currentVersion="$currentVersion_legacy470"
	#lspci | grep -i 'Quadro K2100M' > /dev/null 2>&1 && export currentVersion="$currentVersion_legacy470"
	
	
	
	
	
	
	
	
	
	
	[[ -e /nv_legacy470 ]] && export currentVersion="$currentVersion_legacy470"
}
_write_nvidia-series535p() {
	_set_nvidia

	echo "$currentVersion_series535p"
}
_write_nvidia-legacy470() {
	_set_nvidia

	echo "$currentVersion_legacy470"
}




_wait_rootLock() {
	# Loop expected much slower than sleep/iteration, expect reasonable CPU and such ~0.3s/iteration.
	# If CPU and such are faster, than both this loop and any detect function, are both expected to change timing comparably, so adjustments are expected NOT necessary.
	
	local currentIteration
	local currentIteration_continuing
	currentIteration=0
	currentIteration_continuing=1234567890
	while [[ "$currentIteration" -lt 384000 ]] && [[ "$currentIteration_continuing" == 1234567890 ]] ; do
		_messagePlain_probe 'wait: rootLock'
		
		currentIteration_continuing=0
		while [[ "$currentIteration_continuing" -lt 120 ]] ; do
			sleep 0.1
			echo 'busy: '"$currentIteration_continuing"
			let currentIteration_continuing="$currentIteration_continuing"+1
			# Some must wait for this script instead, this script does not wait for them.
			#|| [[ $(ls -A -1 /lock* 2>/dev/null | wc -l | tr -dc '0-9') -gt "0" ]]
			if [[ -e /regenerate ]] || [[ -e /lock_rootGrab ]]
			then
				currentIteration_continuing=1234567890
			fi
			let currentIteration="$currentIteration"+1
		done
		echo 'wait: '"$currentIteration"
	done
	sleep 1
	
	[[ "$currentIteration_continuing" == 1234567890 ]] && return 1
	return 0
}



_detect_installed_nvidia() {
	_messageNormal 'init: _detect_installed_nvidia'
	
	# https://askubuntu.com/questions/271613/am-i-using-the-nouveau-driver-or-the-proprietary-nvidia-driver
	#  'Nvidia's (restricted) module name is nvidia . Not nvidiafb or something similar.'
	
	modprobe -l 2>/dev/null | grep -v -i 'nvidiafb' | grep -v -i 'typec' | grep -v -i 'eth' | grep 'nvidia' && _stop 0
	
	# nvidia-wmi-ec-backlight
	find /lib/modules/`uname -r` -name '*.ko' -type f -printf '%P\n' | grep -v -i 'nvidiafb' | grep -v -i 'typec' | grep -v -i 'eth' | grep -v -i 'backlight' | grep 'nvidia' && _stop 0
	
	lsmod | cut -f1 -d\  | grep -v -i 'nvidiafb' | grep 'nvidia' && _stop 0
	
	dpkg -l | grep -v -i 'nvidiafb' | grep 'nvidia' && _stop 0
	
	lspci -nnk | grep -iA2 vga | grep -v -i 'nvidiafb' | grep 'nvidia' && _stop 0
	
	
	_messagePlain_good 'missing: nvidia: driver not installed'
	return 0
}


_detect_nvidia() {
	_messageNormal 'init: _detect_nvidia'
	
	#1b:00.0 VGA compatible controller: NVIDIA Corporation GA102 [GeForce RTX 3090] (rev a1) (prog-if 00 [VGA controller])
	! lspci | grep -i nvidia | grep -i vga && _messagePlain_good 'lspci: missing: nvidia' && _stop 0
	_messagePlain_warn 'lspci: exists: nvidia'
	
	return 0
}


# Returns 0 if input parameters or all lines input require a patch.
_if_patch_nvidia() {
	if [[ "$1" != "" ]] && [[ "$2" != "" ]]
	then
		[[ "$1" == "470.256.02" ]] && ( [[ "$2" == "6.12.1" ]] || [[ "$2" == "6.12.2" ]] || [[ "$2" == "6.12.3" ]] ) && return 0
		return 1
	fi
	

	if [[ "$1" == "470.256.02" ]] && [[ "$2" == "" ]] && [[ "$3" == "" ]]
	then
		grep -v "6.12.1\|6.12.2\|6.12.3\|NULL"
		[[ "$?" == "0" ]] && return 1
		return 0
	fi

	if [[ "$2" == "" ]] && [[ "$3" == "" ]]
	then
		#grep -v "NULL"
		cat
		[[ "$?" == "0" ]] && return 1
		return 0
	fi

	if [[ "$1" == "470.256.02" ]] && [[ "$2" == "" ]] && [[ "$3" == "invert" ]]
	then
		grep "6.12.1\|6.12.2\|6.12.3\|NULL"
		[[ "$?" == "0" ]] && return 1
		return 0
	fi

	if [[ "$2" == "" ]] && [[ "$3" == "invert" ]]
	then
		grep "doNotMatch_1234567890_3141592654\|NULL"
		[[ "$?" == "0" ]] && return 1
		return 0
	fi
	
	cat
	[[ "$?" == "0" ]] && return 1

	return 0
}
_patch_nvidia() {
	local functionEntryPWD
	functionEntryPWD="$PWD"

	cd "$scriptAbsoluteFolder"
	
	rm -f "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion_patch"-custom.run
	
	local currentVersion_patch="$1"
	[[ "$currentVersion_patch" == "" ]] && currentVersion_patch="$currentVersion"

	local currentVersion_patch_kernel="$2"
	[[ "$currentVersion_patch_kernel" == "" ]] && currentVersion_patch_kernel=$(uname -r)

	# https://www.linuxquestions.org/questions/showthread.php?p=6535368
	# https://www.linuxquestions.org/questions/showthread.php?p=6540525#post6540525
	# https://www.linuxquestions.org/questions/attachment.php?attachmentid=43873&d=1732026155
	# https://gist.github.com/joanbm/a6d3f7f873a60dec0aa4a734c0f1d64e
	if [[ "$currentVersion_patch" == "470.256.02" ]] && ( [[ "$currentVersion_patch_kernel" == "6.12.1" ]] || [[ "$currentVersion_patch_kernel" == "6.12.2" ]] || [[ "$currentVersion_patch_kernel" == "6.12.3" ]] ) && _if_patch_nvidia "$currentVersion_patch" "$currentVersion_patch_kernel"
	then
		_messagePlain_nominal '_patch_nvidia'
		_messagePlain_probe_var currentVersion_patch
		_messagePlain_probe_var currentVersion_patch_kernel

		_messagePlain_probe_cmd df -h "$scriptAbsoluteFolder"

		# DANGER: Do NOT distribute this (or ANY similar) patch file, as it may be a derived work of NVIDIA drivers, which NVIDIA may be distributing as a derived work of Linux kernel.
		# ATTRIBUTION-AI ChatGPT 4o Search 2024-12-02 
		#curl -L -A "Mozilla/5.0" 'https://www.linuxquestions.org/questions/attachment.php?attachmentid=43873&d=1732026155' -o "$scriptAbsoluteFolder"/gcc14-k6.10-k6.12.patch.txt
		wget --user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36" 'https://www.linuxquestions.org/questions/attachment.php?attachmentid=43873&d=1732026155' -O "$scriptAbsoluteFolder"/gcc14-k6.10-k6.12.patch.txt



		# ATTRIBUTION-AI ChatGPT o1-preview 2024-12-02
		#env TERM=dumb sh "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion_patch".run -s --ui=none --no-questions --apply-patch "$scriptAbsoluteFolder"/gcc14-k6.10-k6.12.patch.txt < /dev/null > "$scriptAbsoluteFolder"/nv_patch.log 2>&1
		env TERM=dumb sh "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion_patch".run -s --ui=none --no-questions --apply-patch "$scriptAbsoluteFolder"/gcc14-k6.10-k6.12.patch.txt < /dev/null 2>&1
		#env TERM=dumb sh "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion_patch".run -s --ui=none --no-questions --apply-patch "$scriptAbsoluteFolder"/gcc14-k6.10-k6.12.patch.txt < /dev/null > /dev/null 2>&1
		#env TERM=dumb sh ./NVIDIA-Linux-x86_64-470.256.02.run -s --ui=none --no-questions --apply-patch ./gcc14-k6.10-k6.12.patch.txt < /dev/null 2>&1
		#_messagePlain_probe_cmd cat "$scriptAbsoluteFolder"/nv_patch.log

		# In practice, 'nvidia-drm' 'modeset' occurs elsewhere in '_get_nvidia.sh' scripted installation, and is implemented by default through 'modprobe' options .
		#echo 'GRUB_CMDLINE_LINUX_DEFAULT="$GRUB_CMDLINE_LINUX_DEFAULT nvidia-drm.modeset=1"' | sudo -n tee /etc/default/grub.d/91_nvPatch.cfg
		#sudo -n chmod 644 "/etc/default/grub.d/91_nvPatch.cfg"
		#sudo -n update-grub
	fi

	##mv -f "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion_patch".run "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion_patch"-orig.run
	#rm -f "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion_patch".run
	#mv -f "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion_patch"-custom.run "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion_patch".run
	#chmod 755 "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion_patch".run
	chmod 755 "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion_patch"-custom.run
	_messagePlain_probe_cmd ls -l "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-*


	cd "$functionEntryPWD"
	return 0
}


_fetch_nvidia-wget() {
	local currentVersion_fetch="$1"
	[[ "$currentVersion_fetch" == "" ]] && currentVersion_fetch="$currentVersion"
	
	# https://gitweb.gentoo.org/repo/gentoo.git/tree/x11-drivers/nvidia-drivers/nvidia-drivers-510.60.02.ebuild
	# http://gpo.zugaina.org/AJAX/Ebuild/53561524/View
	#  'SRC_URI' 'https://us.download.nvidia.com/XFree86/Linux-x86_64/${PV}/NVIDIA-Linux-x86_64-${PV}.run'
	# https://us.download.nvidia.com/XFree86/Linux-x86_64/510.60.02/NVIDIA-Linux-x86_64-510.60.02.run
	
	
	# https://download.nvidia.com/XFree86/


	
	if [[ ! -e "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion_fetch".run ]]
	then
		wget https://us.download.nvidia.com/XFree86/Linux-x86_64/"$currentVersion_fetch"/NVIDIA-Linux-x86_64-"$currentVersion_fetch".run
	fi
	chmod u+x "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion_fetch".run
	
	
	[[ ! -e "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion_fetch".run ]] && _messageFAIL
	return 0
}
_fetch_nvidia() {
	_messageNormal 'init: _fetch_nvidia'
	_set_nvidia

	cd "$scriptAbsoluteFolder"
	
	
	
	! _fetch_nvidia-wget && return 1
	return 0
}


_install_nvidia() {
	local functionEntryPWD="$PWD"
	
	_messageNormal 'init: _install_nvidia'
	_set_nvidia

	# https://ubuntu.com/blog/how-to-sign-things-for-secure-boot
	# https://download.nvidia.com/XFree86/Linux-x86_64/384.111/README/installdriver.html
	
	local currentExitStatus
	currentExitStatus=0
	
	sleep 45
	systemctl stop gdm3
	systemctl stop sddm
	sleep 3
	# https://www.linuxquestions.org/questions/linux-hardware-18/is-it-possible-to-install-nvidia-driver-without-card-780867/
	#sh "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion".run -s -k $(ls -A -1 -d /usr/src/linux-headers-* | head -n1 | sed -s 's/.*linux-headers-//') --dkms
	#[[ "$?" != "0" ]] && currentExitStatus=1
	
	
	
	# https://wiki.archlinux.org/title/NVIDIA#DRM_kernel_mode_setting
	#  'NVIDIA driver does not provide an fbdev driver for the high-resolution console for the kernel compiled-in vesafb'
	#   lsmod should show a modsetting driver in use ...
	#echo 'GRUB_CMDLINE_LINUX="nvidia-drm.modeset=1"' | sudo -n tee -a "$globalVirtFS"/etc/default/grub
	echo 'options nvidia-drm modeset=1' | sudo -n tee /etc/modprobe.d/nvidia-kms.conf
	
	
	
	# ATTENTION: Be aware kernel compiling may not be the most time consuming step, yet can fail if out of memory .
	local current_hostCoreCount=$(grep ^cpu\\scores /proc/cpuinfo | head -n 1 | tr -dc '0-9')
	local current_hostMemoryTotal=$(cat /proc/meminfo | grep MemTotal | tr -cd '[[:digit:]]')

	local currentParallel
	currentParallel=1


	# DUBIOUS - MARGIN .

	[[ "$current_hostMemoryTotal" -ge 16000000 ]] && [[ "$current_hostCoreCount" -ge "2" ]] && currentParallel=2

	# DUBIOUS - MARGIN .
	[[ "$current_hostMemoryTotal" -ge 16000000 ]] && [[ "$current_hostCoreCount" -ge "3" ]] && currentParallel=3

	[[ "$current_hostMemoryTotal" -ge 32000000 ]] && [[ "$current_hostCoreCount" -ge "3" ]] && currentParallel=3
	[[ "$current_hostMemoryTotal" -ge 32000000 ]] && [[ "$current_hostCoreCount" -ge "4" ]] && currentParallel=4

	[[ "$current_hostMemoryTotal" -ge 60000000 ]] && [[ "$current_hostCoreCount" -ge "5" ]] && currentParallel=5
	[[ "$current_hostMemoryTotal" -ge 60000000 ]] && [[ "$current_hostCoreCount" -ge "6" ]] && currentParallel=6
	[[ "$current_hostMemoryTotal" -ge 60000000 ]] && [[ "$current_hostCoreCount" -ge "8" ]] && currentParallel=8

	[[ "$current_hostMemoryTotal" -ge 96000000 ]] && [[ "$current_hostCoreCount" -ge "10" ]] && currentParallel=10
	[[ "$current_hostMemoryTotal" -ge 96000000 ]] && [[ "$current_hostCoreCount" -ge "12" ]] && currentParallel=12

	[[ "$current_hostMemoryTotal" -ge 120000000 ]] && [[ "$current_hostCoreCount" -ge "14" ]] && currentParallel=14
	[[ "$current_hostMemoryTotal" -ge 120000000 ]] && [[ "$current_hostCoreCount" -ge "16" ]] && currentParallel=16
	
	# ' "  -j CONCURRENCY-LEVEL, --concurrency-level=CONCURRENCY-LEVEL" '
	# 'default' 'number of detected CPUs' 'nvidia-installer' 'default' 'limited to 32'
	


	# ' --log-file-name=/dev/stdout '
	# 'default' ' /var/log/nvidia-installer.log '
	
	local currentLine
	
	# http://us.download.nvidia.com/XFree86/Linux-x86_64/515.43.04/README/kernel_open.html
	#  'proprietary flavor supports the GPU architectures Maxwell, Pascal, Volta, Turing, Ampere, and forward'
	#  'open kernel modules cannot support GPUs before Turing, because the open kernel modules depend on the GPU System Processor (GSP) first introduced in Turing'
	# https://github.com/clearlinux/distribution/issues/2069
	#  'kernel modules are generally not sensitive to these minor compiler changes' ... '(nvidia has some paranoid check that's not typical for kernel modules)'
	#--no-cc-version-check
	#-m=kernel
	#-m=kernel-open
	#--run-nvidia-xconfig   ...   # " default response is 'no' "
	#echo | sudo -n tee "$globalVirtFS"/nv_legacy470 > /dev/null 2>&1
	#echo | sudo -n tee /nv_legacy470 > /dev/null 2>&1
	if [[ "$current_nvidia_installAllKernels" == "true" ]]
	then
		_messagePlain_probe NVIDIA-Linux-x86_64-"$currentVersion".run --extract-only
		sh "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion".run --extract-only
		[[ "$?" != "0" ]] && currentExitStatus=1
		
		# TODO
		# https://github.com/nvidia/nvidia-installer
		
		cd "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion"
		"$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion"/nvidia-installer --no-kernel-module --ui=none --no-questions
		[[ "$?" != "0" ]] && currentExitStatus=1
		
		local currentIterationsTotal
		currentIterationsTotal=0
		local currentIteration
		currentIteration=0
		# If headers for more than 12 kernels are installed, that is an issue.
		ls -A -1 -d /usr/src/linux-headers-* | sort -r -V | head -n 12 | sed -s 's/.*linux-headers-//' | _if_patch_nvidia "$currentVersion" | grep -v '\-common$' | while read -r currentLine
		do
			_messagePlain_probe 'nvidia: make: '"$currentLine"
			
			export SYSSRC=/usr/src/linux-headers-"$currentLine"
			export IGNORE_CC_MISMATCH=1
			
			export IGNORE_MISSING_MODULE_SYMVERS=1
			
			
			cd "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion"/kernel
			
			make clean
			
			_messagePlain_probe 'nvidia: make -j $(nproc)'
			make -j $(nproc)
			#[[ "$?" != "0" ]] && [[ "$currentIterationsTotal" -le "2" ]] && currentExitStatus=1
			#[[ "$?" != "0" ]] && [[ "$currentIterationsTotal" -le "1" ]] && currentExitStatus=1
			[[ "$?" != "0" ]] && [[ "$currentIterationsTotal" -le "0" ]] && currentExitStatus=1
			
			mkdir -p /lib/modules/"$currentLine"/kernel/drivers/video
			cp -f ./*.ko /lib/modules/"$currentLine"/kernel/drivers/video/
			
			# https://stackoverflow.com/questions/34800731/module-not-found-when-i-do-a-modprobe
			sudo -n depmod "$currentLine"
			
			
			# https://forums.developer.nvidia.com/t/error-nvidia-settings-could-not-find-the-registry-key-file/50142/2
			cd /usr/share/nvidia
			sudo ln -sf $(ls -1 nvidia-application-profiles-*-key-documentation | sort -r -V) nvidia-application-profiles-key-documentation
			
			
			#--systemd
			#--expert
			#_messagePlain_probe nvidia "$currentLine"
			#sh "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion".run --ui=none --no-questions -j "$currentParallel" --no-cc-version-check -k "$currentLine" --dkms -m=kernel
			#[[ "$?" != "0" ]] && currentExitStatus=1
			
			# TODO
			# http://download.nvidia.com/XFree86/Linux-x86_64/515.43.04/README/kernel_open.html
			# https://github.com/NVIDIA/open-gpu-kernel-modules
			# https://github.com/NVIDIA/open-gpu-kernel-modules/blob/main/README.md
			#--no-kernel-module
			
			let currentIteration=currentIteration+1
			let currentIterationsTotal=currentIterationsTotal+1
		done




		# WARNING: May be untested.

		# ATTENTION: Nearly indentical duplicate of previous code which skips over any NVIDIA drivers and/or kernel versions requiring patching.
		# This otherwise duplicative code works around some issues, which would need to be addressed by any attempt to combine into a more elegant function.
		# Original installer is deleted by _patch_nvidia to reduce disk space requirements in some situations.
		# Local variables may be unavailable in a function.
		# Directory must be extracted from NVIDIA installer separately for each patch (due to at least differing kernel versions).
		
		currentIteration=0
		# If headers for more than 12 kernels are installed, that is an issue.
		ls -A -1 -d /usr/src/linux-headers-* | sort -r -V | head -n 12 | sed -s 's/.*linux-headers-//' | _if_patch_nvidia "$currentVersion" "" "invert" | grep -v '\-common$' | while read -r currentLine
		do
			_messagePlain_probe 'nvidia: PATCH , EXTRACT'
			cd "$scriptAbsoluteFolder"/

			_safeRMR "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion"
			_safeRMR "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion"-custom
			rm -f "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion"-custom.run

			
			_patch_nvidia "$currentVersion" "$currentLine"

			sh "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion"-custom.run --extract-only
			[[ "$?" != "0" ]] && currentExitStatus=1



			# ###
			cd "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion"-custom
			"$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion"-custom/nvidia-installer --no-kernel-module --ui=none --no-questions
			[[ "$?" != "0" ]] && currentExitStatus=1
			
			
			
			_messagePlain_probe 'nvidia: make: '"$currentLine"
			
			export SYSSRC=/usr/src/linux-headers-"$currentLine"
			export IGNORE_CC_MISMATCH=1
			
			export IGNORE_MISSING_MODULE_SYMVERS=1
			
			
			cd "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion"-custom/kernel
			
			make clean
			
			_messagePlain_probe 'nvidia: make -j $(nproc)'
			make -j $(nproc)
			#[[ "$?" != "0" ]] && [[ "$currentIterationsTotal" -le "2" ]] && currentExitStatus=1
			#[[ "$?" != "0" ]] && [[ "$currentIterationsTotal" -le "1" ]] && currentExitStatus=1
			[[ "$?" != "0" ]] && [[ "$currentIterationsTotal" -le "0" ]] && currentExitStatus=1
			
			mkdir -p /lib/modules/"$currentLine"/kernel/drivers/video
			cp -f ./*.ko /lib/modules/"$currentLine"/kernel/drivers/video/
			
			# https://stackoverflow.com/questions/34800731/module-not-found-when-i-do-a-modprobe
			sudo -n depmod "$currentLine"
			
			
			# https://forums.developer.nvidia.com/t/error-nvidia-settings-could-not-find-the-registry-key-file/50142/2
			cd /usr/share/nvidia
			sudo ln -sf $(ls -1 nvidia-application-profiles-*-key-documentation | sort -r -V) nvidia-application-profiles-key-documentation
			
			
			#--systemd
			#--expert
			#_messagePlain_probe nvidia "$currentLine"
			#sh "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion"-custom.run --ui=none --no-questions -j "$currentParallel" --no-cc-version-check -k "$currentLine" --dkms -m=kernel
			#[[ "$?" != "0" ]] && currentExitStatus=1
			
			# TODO
			# http://download.nvidia.com/XFree86/Linux-x86_64/515.43.04/README/kernel_open.html
			# https://github.com/NVIDIA/open-gpu-kernel-modules
			# https://github.com/NVIDIA/open-gpu-kernel-modules/blob/main/README.md
			#--no-kernel-module
			
			let currentIteration=currentIteration+1
			let currentIterationsTotal=currentIterationsTotal+1
		done

		#cp -f "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion"-orig.run "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion".run
		#chmod 755 "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion".run

		#_safeRMR "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion"
		
		cd "$functionEntryPWD"
	else
		#--no-recursion
		local currentKernel=$(uname -r)
		_messagePlain_probe nvidia uname -r "$currentKernel"

		if _if_patch_nvidia "$currentVersion" "$currentKernel"
		then
			_patch_nvidia "$currentVersion" "$currentKernel"

			sh "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion"-custom.run --ui=none --no-questions -j "$currentParallel" --no-cc-version-check -k "$currentKernel" -m=kernel
		else
			sh "$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion".run --ui=none --no-questions -j "$currentParallel" --no-cc-version-check -k "$currentKernel" -m=kernel
		fi
	fi
	
	
	#sudo -n apt-get -y clean
	#sudo -n sudo apt-get autoremove --purge
	
	
	# https://unix.stackexchange.com/questions/510757/how-to-automatically-force-full-composition-pipeline-for-nvidia-gpu-driver
	sudo -n mkdir -p /home/"$custom_user"/.config/autostart
	[[ "$custom_user" == "" ]] && export custom_user=user
	#Exec=nvidia-settings --assign CurrentMetaMode="nvidia-auto-select +0+0 { ForceFullCompositionPipeline = On }" ; /usr/bin/nvidia-settings -l
	echo '
[Desktop Entry]
Exec=/usr/bin/nvidia-settings -l
Type=Application
' | sudo tee /home/"$custom_user"/.config/autostart/nvidia.desktop > /dev/null
	sudo -n chown "$custom_user":"$custom_user" /home/"$custom_user"
	sudo -n chown "$custom_user":"$custom_user" /home/"$custom_user"/.config
	sudo -n chown "$custom_user":"$custom_user" /home/"$custom_user"/.config/autostart
	sudo -n chown "$custom_user":"$custom_user" /home/"$custom_user"/.config/autostart/nvidia.desktop
	sudo -n chmod 555 /home/"$custom_user"/.config/autostart/nvidia.desktop
	
	# https://unix.stackexchange.com/questions/510757/how-to-automatically-force-full-composition-pipeline-for-nvidia-gpu-driver
	#  WARNING: 'Do not have both of the above enabled at the same time.'
	#  WARNING: 'Be sure to enable triple buffering in nvidia-settings if you enable triple buffering in KWin.'
	# https://forums.developer.nvidia.com/t/gl-yield-and-performance-issues/27736
	#  'performance is badly affected by __GL_YIELD=USLEEP'
	echo "export __GL_YIELD=\"USLEEP\"" > /etc/profile.d/nvidia_kwin.sh
	#echo "export KWIN_TRIPLE_BUFFER=1" > /etc/profile.d/nvidia_kwin.sh
	
	# Another workaround may be the 'OpenGL3.1' backend for kwin, however, that may cause some jitter or other issues.
	
	sleep 3
	systemctl stop gdm3
	systemctl start sddm
	sleep 6
	systemctl status sddm
	
	cd "$functionEntryPWD"
	[[ "$currentExitStatus" != "0" ]] && _messageFAIL
	return "$currentExitStatus"
}




_install() {
	_mustBeRoot
	
	_detect_nvidia "$@"
	
	_fetch_nvidia "$@"
	
	_install_nvidia "$@"
}

_uninstall() {
	_mustBeRoot
	
	_fetch_nvidia "$@"
	
	"$scriptAbsoluteFolder"/NVIDIA-Linux-x86_64-"$currentVersion_fetch".run --uninstall
}




_detect_virtualization() {
	! lspci | grep -i vmware && ! lspci | grep -i virtualbox && ! cat /proc/cpuinfo | grep -i model | grep -i qemu && ! sudo -n lspci | grep -i vmware && ! sudo -n lspci | grep -i virtualbox && return 0
	
	_messageFAIL
	_stop 1
	exit 1
	exit
	return 1
	return
}
_detect_chroot() {
	# https://unix.stackexchange.com/questions/14345/how-do-i-tell-im-running-in-a-chroot
	if [ "$(stat -c %d:%i /)" != "$(stat -c %d:%i /proc/1/root/.)" ]
	then
		_messageFAIL
		_stop 1
		exit 1
		exit
		return 1
		return
	fi
	
	if systemctl status sddm 2>&1 | head -n 2 | grep -i 'chroot'
	then
		_messageFAIL
		_stop 1
		exit 1
		exit
		return 1
		return
	fi
	
	return 0
}
_detect_wsl() {
	# https://unix.stackexchange.com/questions/14345/how-do-i-tell-im-running-in-a-chroot
	if ( uname -a | grep -i 'microsoft' > /dev/null 2>&1 || uname -a | grep -i 'WSL2' > /dev/null 2>&1 )
	then
		_messageFAIL
		_stop 1
		exit 1
		exit
		return 1
		return
	fi
	
	return 0
}
_detect_live() {
	_messagePlain_probe '_detect_live'
	mountpoint /run/live/overlay && echo 'detect: mountpoint: live' && return 0
	return 1
}
_autoinstall_procedure() {
	_mustBeRoot
	
	! _wait_rootLock && _messageFAIL
	
	# WARNING: DANGER: NOTICE: Do NOT autoinstall during build scripts. Distribution may NOT be allowed.
	# That said, internal use is not distribution. For *strictly* internal builds, postprocessing the image by deliberately calling '_install' may be possible.
	
	if ! _detect_virtualization
	then
		_messageFAIL
		_stop 1
		exit 1
		exit
		return 1
		return
	fi
	
	if ! _detect_chroot
	then
		_messageFAIL
		_stop 1
		exit 1
		exit
		return 1
		return
	fi
	
	if ! _detect_wsl
	then
		_messageFAIL
		_stop 1
		exit 1
		exit
		return 1
		return
	fi

	if ! ! _detect_live
	then
		#sleep 200
		#sleep 80
		sleep 45
	fi
	
	
	
	_detect_installed_nvidia "$@"
	
	_install "$@"
}
_autoinstall() {
	if grep -r 'blacklist nvidia' /etc/modprobe.d/*
	then
		# ie. Do NOT stop sddm to install drivers if the drivers should be disabled anyway.
		echo 'stop: disabled by modprobe config'
		return 1
	fi
	
	rm -f /lock_nvidia_autoinstall > /dev/null 2>&1
	echo > /lock_nvidia_autoinstall
	#_stop_prog() {
		#rm -f /lock_nvidia_autoinstall
	#}
	#export -f _stop_prog
	
	if ! "$scriptAbsoluteLocation" _autoinstall_procedure "$@"
	then
		rm -f /lock_nvidia_autoinstall > /dev/null 2>&1
		_messageFAIL
	fi
	
	rm -f /lock_nvidia_autoinstall > /dev/null 2>&1
	return 0
}



# WARNING: DANGER: Do NOT distribute!
#echo | sudo -n tee "$globalVirtFS"/nv_legacy470 > /dev/null 2>&1
#echo | sudo -n tee /nv_legacy470 > /dev/null 2>&1
_force_install() {
	_mustBeRoot
	
	export current_nvidia_installAllKernels="true"
	
	_fetch_nvidia "$@"
	_install_nvidia "$@"
}








_enter() {
	_autoinstall "$@"
}

_test_prog() {
	true
}
_main() {
	#_start
	_start scriptLocal_mkdir_disable
	
	_collect
	
	_enter "$@"
	
	_stop
}
if [[ "$1" == '_test' ]]
then
	current_deleteScriptLocal="false"
	[[ ! -e "$scriptLocal" ]] && current_deleteScriptLocal="true"
	_stop_prog() {
		[[ "$current_deleteScriptLocal" == "true" ]] && rmdir "$scriptLocal" > /dev/null 2>&1
	}
fi
if [[ "$1" == '_'* ]] && type "$1" > /dev/null 2>&1
then
	"$@"
	internalFunctionExitStatus="$?"
	return "$internalFunctionExitStatus" > /dev/null 2>&1
	exit "$internalFunctionExitStatus"
fi
if [[ "$1" != '_'* ]]
then
	_main "$@"
fi

